<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter version="5.1" xml:id="cha-obs-scm-ci-workflow-integration"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns7="http://docbook.org/ns/transclusion"
         xmlns:ns6="http://www.w3.org/1998/Math/MathML"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>SCM/CI Workflow Integration</title>

  <sect1 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup">
    <title>SCM/CI Workflow Integration Setup</title>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-introduction">
      <title>Introduction</title>

      <para>With this integration, you can take advantage of source code management (SCM)
      systems like GitHub, GitLab or Gitea to manage your packages sources. Then, you can
      integrate those sources with OBS to run different <emphasis
      role="bold">workflows</emphasis>, for instance, to build a
      package and report back the result to the SCM.</para>

      <para>In the following sections, you will find the instructions to set
      up the integration between SCMs and OBS.</para>

      <para>This chapter talks in GitHub jargon to simplify the text. As
      constantly mentioning all the names for the same things, e.g. <emphasis>Pull Requests/Merge Requests</emphasis>,
      is tiresome and confusing. However, every aspect has its
      correspondence in GitLab and Gitea. Refer to <xref
      linkend="sec-obs-obs-scm-ci-workflow-integration-setup-equivalence-table"/>
      for clarification of terminology.</para>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-prerequisites">
      <title>Prerequisites</title>

      <para>Before you start, you need to</para>

      <itemizedlist>
        <listitem>
          <para>have a repository on GitHub.</para>
        </listitem>

        <listitem>
          <para>have a package on an OBS Instance.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-supported-scms">
      <title>Supported SCMs</title>

      <para>We support the GitHub.com and GitLab.com instances.</para>

      <para>We also support Self-Hosted instances from GitHub, GitLab and Gitea.
      As long as the network connectivity works, OBS will be able to interact
      with that SCM.</para>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication">
      <title>Token Authentication</title>

      <para>OBS and GitHub need to talk to each other. Tokens are the way to
      make this happen.</para>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-obs-with-scm">
        <title>How to Authenticate OBS with SCMs</title>

        <para>You have to create a GitHub <emphasis role="bold">personal
        access token</emphasis>. OBS is going to use it to talk to
        GitHub on your behalf.</para>

        <para>The personal access token needs, at least, the following scopes
        assigned:</para>

        <itemizedlist>
          <listitem>
            <para>GitHub Classic Token: repo</para>
          </listitem>

          <listitem>
            <para>GitHub Fine-Grained Token:</para>
            <itemizedlist>
              <listitem>
                <para>Contents: Read only</para>
              </listitem>

              <listitem>
                <para>Commit statuses: Read and write</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>GitLab: api</para>
          </listitem>

          <listitem>
            <para>Gitea: repo</para>
          </listitem>
        </itemizedlist>

        <para>Check <link
        xlink:href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token">GitHubâ€™s</link>
        , <link
        xlink:href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token">GitLab's</link>
        and <link
        xlink:href="https://docs.gitea.io/en-us/api-usage/#generating-and-listing-api-tokens">Gitea's</link>
        documentation to learn how.</para>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-scm-with-obs">
        <title>How to Authenticate SCMs with OBS</title>

         <para>You have to create an OBS <emphasis role="bold">workflow
        token</emphasis>. Github is going to use it to trigger actions on
        OBS on your behalf.</para>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-scm-with-obs-create-token">
          <title>Create Token</title>

          <para>You can create the OBS token via WebUI in <emphasis>Profile
          &gt; Manage Your Tokens.</emphasis></para>

          <para>You can also use <emphasis>osc</emphasis> for this:</para>

          <screen>osc token --create --operation workflow --scm-token long_ascii_salad</screen>

          <para>Example of response:</para>

          <screen language="xml">
&lt;status code="ok"&gt;
    &lt;summary&gt;Ok&lt;/summary&gt;
    &lt;data name="token"&gt;long_ascii_salad&lt;/data&gt;
    &lt;data name="id"&gt;12345&lt;/data&gt;
&lt;/status&gt;
       </screen>

          <para>Make sure you replace <emphasis>long_ascii_salad</emphasis>
          with your real GitHub personal access token created in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-obs-with-scm"/></para>

          <warning>
            <para>Don't forget to keep your token secret to prevent someone
            else from triggering operations in your name!</para></warning>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-scm-with-obs-revoke-regenerate-token">
          <title>Regenerating Secrets and Deleting Tokens</title>

          <para>If you suspect your OBS token secret was leaked, you can regenerate
          the secret or delete the whole token to secure it again:</para>

          <para><emphasis role="bold">a) Regenerate the
          token secret</emphasis></para>

          <para>Through the WebUI in<emphasis> Profile &gt; Manage Your Tokens
          &gt; Edit &gt; Regenerate Token</emphasis>.</para>

          <para><emphasis role="bold">b) Delete the token</emphasis></para>

          <para>You can always delete your token via WebUI, in
          <emphasis>Profile &gt; Manage Your Tokens</emphasis>, or with these
          commands:</para>

          <screen language="xml"><command>osc</command> token # list all your tokens</screen>

          <screen language="xml"><command>osc</command> token --delete $token_id # remove the token with the given id</screen>

          <para>Then you can create a new one as explained in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication-how-to-authenticate-scm-with-obs"/>
          and replace it wherever you use it.</para>
        </sect4>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks">
      <title>Webhooks</title>

      <para>Once OBS and GitHub are allowed to speak to each other, they can
      start talking via <emphasis role="bold">webhooks</emphasis>.</para>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks-scm-events">
        <title>SCM Events</title>

        <para>On a GitHub repository, events are happening all the time: a
        pull request is created, somebody pushes a commit, a pull request is
        merged etc. When you set up a webhook on GitHub, you can specify
        which events you are interested in. Only when those events happen, the
        webhook will be sent to OBS.</para>

        <para>This is the list of SCM events supported by the existing
        workflows in OBS:</para>

        <itemizedlist>
          <listitem>
            <para>Pull requests and Merge requests</para>
          </listitem>

          <listitem>
            <para>Pushes</para>
          </listitem>

          <listitem>
            <para>Tag Pushes</para>
          </listitem>
        </itemizedlist>

        <para>In addition, the Pull request events contain a field called
        action. OBS supports a different subset of Pull request event actions,
        depending on the SCM. For GitHub and Gitea, the following set of actions
        is supported:</para>

        <itemizedlist>
          <listitem>
            <para>closed</para>
          </listitem>

          <listitem>
            <para>opened</para>
          </listitem>

          <listitem>
            <para>reopened</para>
          </listitem>

          <listitem>
            <para>synchronize</para>
          </listitem>

          <listitem>
            <para>synchronized</para>
          </listitem>
        </itemizedlist>

        <para>For Gitlab's Merge request events, the following actions are
        supported:</para>

        <itemizedlist>
          <listitem>
            <para>close</para>
          </listitem>

          <listitem>
            <para>merge</para>
          </listitem>

          <listitem>
            <para>open</para>
          </listitem>

          <listitem>
            <para>reopen</para>
          </listitem>

          <listitem>
            <para>update</para>
          </listitem>
        </itemizedlist>

        <para>Refer to the <xref  xrefstyle="select:title" linkend="sec-obs-obs-scm-ci-workflow-integration-setup-equivalence-table"/> for more details or read more about <link
        xlink:href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads">GitHub
        events</link>, <link
        xlink:href="https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html">GitLab
        events</link>
        and <link
        xlink:href="https://docs.gitea.io/en-us/webhooks/">Gitea
        events</link>.</para>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks-how-to-set-up-a-webhook-on-github">
        <title>How to Set Up a Webhook on Github</title>

        <para>Go to the project you want to set the integration on, then under
        <emphasis>Settings &gt; Webhooks</emphasis>.</para>

        <figure>
          <title>Webhooks on GitHub.</title>
          <mediaobject>
            <imageobject>
            <imagedata fileref="sprint_95_github_webhook_form.png" width="50%"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>You have to fill in the form with:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Payload URL:</emphasis>
            <emphasis>https://build.opensuse.org/trigger/workflow?id=12345</emphasis>.
            Replace 12345 with the OBS token numerical ID previously
            obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Content type:</emphasis>
            application/json.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Secret:</emphasis>
            <emphasis>uvwxyz</emphasis>. Replace uvwxyz with the OBS token
            secret string previously obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Enable SSL
            verification</emphasis>.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Let me select individual
            events</emphasis>: Pull requests, Pushes.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks-how-to-set-up-a-webhook-on-gitlab">
        <title>How to Set Up a Webhook on GitLab</title>

        <para>Go to the project you want to set the integration on, under
        the<emphasis> Settings &gt; Webhooks</emphasis>.</para>

        <figure>
          <title>Webhooks on GitLab.</title>

          <mediaobject>
            <imageobject>
                <imagedata fileref="sprint_95_gitlab_webhook_form.png" width="50%"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>Fill in the following fields:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">URL:</emphasis><emphasis>
            https://build.opensuse.org/trigger/workflow?id=12345.</emphasis>
            Replace 12345 with the OBS token numerical ID previously
            obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Secret Token:</emphasis>
            <emphasis>uvwxyz</emphasis> Replace uvwxyz with the OBS token
            secret string previously obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Trigger:</emphasis> <emphasis>Merge
            request events</emphasis>, <emphasis>Push
              events</emphasis>, <emphasis>Tag push events</emphasis>.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks-how-to-set-up-a-webhook-on-gitea">
        <title>How to Set Up a Webhook on Gitea</title>

        <para>Go to the repository you want to set the integration on, then under
        <emphasis>Settings &gt; Webhooks</emphasis>.</para>

        <figure>
          <title>Webhooks on Gitea.</title>
          <mediaobject>
            <imageobject>
            <imagedata fileref="sprint_95_gitea_webhook_form.png" width="50%"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para>You have to fill in the form with:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Target URL:</emphasis>
            <emphasis>https://build.opensuse.org/trigger/workflow?id=12345</emphasis>.
            Replace 12345 with the OBS token numerical ID previously
            obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">HTTP Method:</emphasis>
            POST.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">POST Content Type:</emphasis>
            application/json.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Secret:</emphasis>
            <emphasis>uvwxyz</emphasis>. Replace uvwxyz with the OBS token
            secret string previously obtained.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Custom events...</emphasis>:
            Pull Request, Push.</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows">
      <title>OBS Workflows</title>

      <para>A GitHub event occurs and OBS receives the corresponding webhook.
      Now is when the <emphasis role="bold">OBS workflows</emphasis> come into
      play.</para>

      <para>A workflow is nothing else than a sequence of <emphasis
      role="bold">steps</emphasis> you want to perform in OBS.
      You can describe the steps to run in a YAML configuration
      file.</para>

      <para>To do so, in the root directory of your GitHub repository, create
      a directory <emphasis>.obs</emphasis> which contains a file called
      <emphasis>workflows.yml</emphasis>. If you don't want to use that
      directory, you should check
      <xref  xrefstyle="select:title" linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-config-location"/> out.</para>

      <para>
        The content of <emphasis>.obs/workflows.yml</emphasis> could look
        like this:
      </para>
      <screen>rebuild_master:
  steps:
    - rebuild_package:
        project: home:Admin
        package: ctris
  filters:
    event: push</screen>

      <para>You can also define multiple workflows, each one needs an
      <emphasis>unique</emphasis> name. The following example contains two
      workflows: <emphasis>main_workflow</emphasis> and
      <emphasis>rebuild_master</emphasis>.</para>

      <screen>main_workflow:
  steps:
    - branch_package:
        source_project: OBS:Server:Unstable
        source_package: obs-server
        target_project: OBS:Server:Unstable:CI
  filters:
    event: pull_request
rebuild_master:
  steps:
    - rebuild_package:
        project: home:Admin
        package: ctris
  filters:
    event: push
    branches:
      only:
        - master</screen>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-config-location">
        <title>Configuration File Location</title>

        <para>By default the configuration file is fetched from the repository's
        target branch under <emphasis>.obs/workflows.yml</emphasis>. You can
        of course adjust that by editing the token configuration in OBS. The
        following options are available:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Path for Workflows Configuration File</emphasis>
            allows you to adjust the path to be different than the default
            <emphasis>.obs/workflows.yml</emphasis> in the code repository.</para>
          </listitem>

          <listitem>
            <para><emphasis>URL to Workflows Configuration File</emphasis>
            allows you to use a file that is hosted in a different place than
            the code repository.</para>
          </listitem>
        </itemizedlist>

        <figure>
          <title>Configuration File Location Options in Edit Token</title>
          <mediaobject>
            <imageobject>
              <imagedata width="50%"
                        fileref="workflows_config_file_location.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-steps">
        <title>OBS Workflow Steps</title>

        <para>We support the following steps (the keys used in the
        configuration file appears surrounded with parenthesis):</para>

        <itemizedlist>
          <listitem>
            <para>Branch a package in a project (branch_package).</para>
          </listitem>

          <listitem>
            <para>Submit a request (submit_request).</para>
          </listitem>

          <listitem>
            <para>Link a package to a project (link_package).</para>
          </listitem>

          <listitem>
            <para>Configure repositories/architectures for a project
            (configure_repositories)</para>
          </listitem>

          <listitem>
            <para>Rebuild a package (rebuild_package)</para>
          </listitem>

          <listitem>
            <para>Set flags for projects, packages, repositories or architectures (set_flags)</para>
          </listitem>

          <listitem>
            <para>Trigger services of a package (trigger_services)</para>
          </listitem>
        </itemizedlist>

        <warning>
          <para>The user the token belongs to needs to have permissions to
          branch a package, link packages, configure repositories/architectures, rebuild packages and trigger services of a package.</para>
        </warning>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-branch-a-package">
          <title>Branch a Package in a Project</title>

          <para>Given we have a source package called<emphasis>
          ctris</emphasis> coming from a source project called
          <emphasis>games</emphasis>, and a target project called
          <emphasis>home:jane</emphasis>, this step will branch that package
          onto the target project, keeping in mind that:</para>

          <itemizedlist>
            <listitem>
              <para>With a pull request event, it will go to e.g.:
              <emphasis>home:jane:github:jane:ctris:PR-1/ctris</emphasis>. <emphasis>PR-1</emphasis> being the pull request number.</para>
            </listitem>

            <listitem>
              <para>With a push event for commits, it will go to e.g.:<emphasis>
              home:jane/ctris-66f2acfbded89a19935ee6d481b7cf2ab95427f6</emphasis>. <emphasis>66f2acfbded89a19935ee6d481b7cf2ab95427f6</emphasis> being the SHA of the latest commit that triggered the event.</para>
            </listitem>

            <listitem>
              <para>With a push event for tags, it will go to e.g.:<emphasis>
              home:jane/ctris-release_1</emphasis>. <emphasis>release_1</emphasis> being the name of the tag that triggered the event.</para>
            </listitem>
          </itemizedlist>

          <para>This is an example of a configuration file with a branch
          package step:</para>

          <screen>workflow:
  steps:
    - branch_package:
        source_project: games
        source_package: ctris
        target_project: home:jane</screen>

        <para>Branching a package into a project that did not exist before, for instance for a pull request event, will branch the package and
        set up the same repositories that the source project has. If you want to skip this and set up repositories yourself, with the
        configure_repositories step, set the <emphasis>add_repositories</emphasis> key to anything else than <emphasis>enabled</emphasis>.</para>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-submit-request">
          <title>Submit a Request</title>

          <para>The submit request step is the equivalent of the <emphasis>osc submitrequest</emphasis> command.</para>

          <para>The requirements to run a submit request step are:</para>

          <itemizedlist>
            <listitem>
              <para>There has to be a source package.</para>
            </listitem>

            <listitem>
              <para>There has to be some changes between the source package and the target package.</para>
            </listitem>
          </itemizedlist>

          <para>After the previous requirements are met, keep in mind that:</para>

          <itemizedlist>
            <listitem>
              <para>With a pull request open event, push event, or tag_push event, it will create the submit request.</para>
            </listitem>


            <listitem>
              <para>When more commits are added to the pull request, it will supersede
              the request it previously created with a new request.</para>
            </listitem>

            <listitem>
              <para>With a pull_request closed event, it will revoke the request.</para>
            </listitem>
          </itemizedlist>

          <para>This is an example of a configuration file with a submit request step:</para>

          <screen>workflow:
  steps:
    - submit_request:
        source_project: games
        source_package: ctris
        target_project: home:jane_doe
        target_package: ctris                        # (optional, uses source_package if not set)
        description: 'Check out this cool package'   # (optional, uses the commit/pull request message if not set)</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-link-a-package-to-a-project">
          <title>Link a Package to a Project</title>

          <para>The link package step is the equivalent of <emphasis>osc
          linkpac</emphasis> command.</para>

          <para>Given a source project called <emphasis>devel</emphasis>, a
          source package called <emphasis>gcc</emphasis>, a target project
          called <emphasis>home:jane</emphasis>, and a GitHub fork called
          <emphasis>jane/gcc</emphasis> the step will link the package
          <emphasis>devel/gcc</emphasis> against:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>home:jane:github:jane:gcc:PR-1/gcc</emphasis>
              for a pull request event. <emphasis>PR-1</emphasis> being the pull request number.</para>
            </listitem>

            <listitem>
              <para><emphasis>home:jane/gcc-fae00a0ac0e5687343a60ae02bf60352002ab9aa</emphasis>
              with a push event for commits. <emphasis>fae00a0ac0e5687343a60ae02bf60352002ab9aa</emphasis>
              being the SHA of the latest commit that triggered the event.</para>
            </listitem>

            <listitem>
              <para><emphasis>home:jane/gcc-release_1</emphasis>
              with a push event for tags. <emphasis>release_1</emphasis>
              being the name of the tag that triggered the event.</para>
            </listitem>
          </itemizedlist>

          <para>This is an example of a configuration file with a link package
          step:</para>

          <screen>workflow:
  steps:
    - link_package:
        source_project: devel
        source_package: gcc
        target_project: home:jane</screen>

          <note>
            <para>If you rely on <xref  xrefstyle="select:title" linkend="cha-obs-source-service"/>
            to run, for instance to pick up changes from a PR with the <emphasis>obs_scm</emphasis> service, you can't make use of this step.
            Package links do not run the services. Use the <emphasis>branch_package</emphasis> step instead.</para>
          </note>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-configure-repositories-architectures-for-a-project">
          <title>Configure Repositories/Architectures for a Project</title>

          <para>Given a project called <emphasis>home:jane</emphasis>, the step will
          configure a number of repositories and architectures for:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis>home:jane:jane_github:repo123:PR-1</emphasis>
              when the event is a pull request. <emphasis>jane_github</emphasis> being the
              username/organization which owns the SCM repository.
              <emphasis>repo123</emphasis> being the name of the SCM repository.
              <emphasis>PR-1</emphasis> being the pull request number.</para>
            </listitem>

            <listitem>
              <para><emphasis>home:jane</emphasis> when the event is a commit or tag push.</para>
            </listitem>
          </itemizedlist>

          <para>Each repository needs:</para>

          <itemizedlist>
            <listitem>
              <para>a name, e.g.:
              <emphasis>openSUSE_Tumbleweed</emphasis></para>
            </listitem>

            <listitem>
              <para>a list of paths, each having a target project (e.g: <emphasis>openSUSE:Factory</emphasis>)
                and target repository (e.g: <emphasis>snapshot</emphasis>)</para>
            </listitem>

            <listitem>
              <para>a list of architectures to be defined for each repository.
              e.g.: <emphasis>x86_64</emphasis> and
              <emphasis>i586</emphasis></para>
            </listitem>
          </itemizedlist>

          <para>This is an example of a configuration file with a configure
          repositories step:</para>

          <screen>workflow:
  steps:
    - configure_repositories:
        project: home:jane
        repositories:
          - name: openSUSE_Tumbleweed
            paths:
              - target_project: openSUSE:Factory
                target_repository: snapshot
              - target_project: openSUSE:Tumbleweed
                target_repository: standard
            architectures:
              - x86_64
              - i586
          - name: openSUSE_Leap_15.2
            paths:
              - target_project: openSUSE:Leap:15.2
                target_repository: standard
            architectures:
              - x86_64</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-rebuild-a-package">
          <title>Rebuild a Package</title>

          <para>Given a project called <emphasis>home:Admin</emphasis> and a
          package <emphasis>ctris</emphasis>, the step will rebuild the
          package <emphasis>home:Admin/ctris</emphasis>.</para>

          <para>This is an example of a configuration file with a rebuild
          package step.</para>

          <screen>workflow:
  steps:
    - rebuild_package:
        project: home:Admin
        package: ctris</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-set-flags">
          <title>Set Flags for Projects, Packages, Repositories or Architectures</title>

          <para>There are OBS-wide defaults for each flag type. This step is
          only necessary if you want to diverge from the defaults (see
          <xref linkend="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-set-flags-type"/>).</para>

          <para>Providing the type <emphasis>build</emphasis>, the status <emphasis>enable</emphasis> and the project <emphasis>home:Admin</emphasis>, OBS will
          enable <emphasis>all</emphasis> builds:</para>

          <itemizedlist>
            <listitem>
              <para>for the <emphasis>home:Admin:$MY_SCM_ORG:$MY_SCM_PROJECT:PR-$MY_PR_NUMBER</emphasis> project
              when the webhook event is a pull request.</para>
            </listitem>
            <listitem>
              <para>for the <emphasis>home:Admin</emphasis> project when the webhook event is a push.</para>
            </listitem>
          </itemizedlist>

          <para>Providing multiple flags is supported as noted in the configuration file below:</para>

          <screen>workflow:
  steps:
    - set_flags:
        flags:
          - type: build
            status: enable
            project: home:Admin
          - type: publish
            status: disable
            project: home:Admin</screen>

          <para>The type, status and project keys are always required. Optional keys are also available to limit the flag to a package, repository or architecture.</para>

          <para>The project, package, repository and architecture should exist before a flag is set for them. They can be created in steps preceding a
          <emphasis>set_flags</emphasis> step, although this isn't necessary as long as they exist.</para>

          <para>The type has to be one of the following values:</para>
          <itemizedlist xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-set-flags-type">
            <title>Valid flag types</title>
            <listitem><para>lock (default status <emphasis>disable</emphasis>)</para></listitem>
            <listitem><para>build (default status <emphasis>enable</emphasis>)</para></listitem>
            <listitem><para>publish (default status <emphasis>enable</emphasis>)</para></listitem>
            <listitem><para>debuginfo (default status <emphasis>disable</emphasis>)</para></listitem>
            <listitem><para>useforbuild (default status <emphasis>enable</emphasis>)</para></listitem>
            <listitem><para>binarydownload (default status <emphasis>enable</emphasis>)</para></listitem>
            <listitem><para>sourceaccess (default status <emphasis>enable</emphasis>)</para></listitem>
            <listitem><para>access (default status <emphasis>enable</emphasis>)</para></listitem>
          </itemizedlist>

          <para>The status is either <emphasis>disable</emphasis> or <emphasis>enable</emphasis>.</para>

          <para>Take into consideration, that if the <emphasis>set_flags</emphasis> step doesn't define a flag specifically, a flag which had been set
          previously will preserve its value.</para>

          <para>So with the configuration file provided below and a <emphasis>pull request event</emphasis>, builds of the
          <emphasis>home:Admin:$MY_SCM_ORG:$MY_SCM_PROJECT:PR-$MY_PR_NUMBER/ctris</emphasis> package will be disabled for the
          <emphasis>openSUSE_Tumbleweed</emphasis> repository and <emphasis>x86_64</emphasis> architecture. For a <emphasis>push event</emphasis>,
          it's exactly the same, except for the package which is <emphasis>home:Admin/ctris-$MY_COMMIT_SHA_OR_TAG_NAME</emphasis>.</para>

        <screen>workflow:
  steps:
    - set_flags:
        flags:
          - type: build
            status: disable
            project: home:Admin
            package: ctris
            repository: openSUSE_Tumbleweed
            architecture: x86_64</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-steps-trigger-services">
          <title>Trigger Services of a Package</title>

          <para>Given a project called <emphasis>home:Admin</emphasis> and a
          package <emphasis>ctris</emphasis>, the step will trigger services of the
          package <emphasis>home:Admin/ctris</emphasis>.</para>

          <para>Be sure to have a <link xlink:href="https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.source_service.html">_service</link>
          file in the package <emphasis>home:Admin/ctris</emphasis>.</para>

          <para>This is an example of a configuration file with a trigger services step:</para>

          <screen>workflow:
  steps:
    - trigger_services:
        project: home:Admin
        package: ctris</screen>
        </sect4>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-filters">
        <title>Filters</title>

        <para>You can customize when workflows run by declaring
        <emphasis role="bold">branch</emphasis> or <emphasis role="bold">Event</emphasis> filters.
        They will make workflows run or not for specific branches/events.
        </para>

        <para>You can define them in the configuration file
        <emphasis>.obs/workflows.yml</emphasis>. Here's an example:</para>
        <screen>workflow:
  steps:
    - branch_package:
        source_project: home:jane_doe
        source_package: ctris
        target_project: games
  filters:
    event: pull_request
    branches:
      only:
        - master
        - staging</screen>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-filters-delimiters">
          <title>Filters Delimiters: only and ignore</title>

          <para>Some steps can affect a group of elements (branches)
          You can use filter delimiters like <emphasis
          role="bold">only</emphasis> and <emphasis
          role="bold">ignore</emphasis> to specify which elements should be
          affected, or not, by the step.</para>

          <para>The available filters delimiters are:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">only: </emphasis>the step only
              affects the elements in the list.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">ignore:</emphasis> the step affects
              all the elements except those in the list.</para>
            </listitem>
          </itemizedlist>

          <note>
            <para><emphasis role="bold">only</emphasis> has precedence over
            <emphasis role="bold">ignore</emphasis>, so if both are defined,
            <emphasis role="bold">ignore</emphasis> is not considered.</para>
          </note>

          <para>This is an example to run a workflow <emphasis>only</emphasis> for the target
          branches <emphasis>master</emphasis>:</para>

          <screen>workflow:
  steps:
    - rebuild_package:
        project: games
        package: ctris
  filters:
    branches:
      only:
        - master</screen>

          <para>This is an example to run a workflow for all the target branches
          <emphasis>except</emphasis> for the branch <emphasis>staging</emphasis>:</para>

          <screen>workflow:
  steps:
    - rebuild_package:
        project: games
        package: ctris
  filters:
    branches:
      ignore:
        - staging</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-filters-event-filter">
          <title>Event Filter</title>

          <para>Setting an event filter will run the workflow only for this event. The event filter doesn't accept multiple events.
          Documentation on the SCM events can be found here: <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks-scm-events"/>.</para>

          <para>The available event filters are:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">pull_request</emphasis> is for pull
              request events.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">merge_request</emphasis> is an alias for the
              'pull_request' event. Introduced with workflow version 1.1 (also see <xref linkend="sec-obs-obs-scm-ci-workflow-integration-workflow-version-table"/>).
              .</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">push</emphasis> is for push
              events related to commits.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">tag_push</emphasis> is for push
              events related to tags.</para>
            </listitem>
          </itemizedlist>

          <para>The following is an example to run a workflow only for a pull
          request event:</para>

          <screen>workflow:
  steps:
    - branch_package:
        source_project: games
        source_package: ctris
        target_project: home:jane_doe
  filters:
    event: pull_request</screen>
        </sect4>

        <sect4 xml:id="sec-obs-obs-scm-ci-workflow-integration-obs-workflows-filters-branches-filter">
          <title>Branches Filter</title>

          <para>Matches target branches based on their names and runs a
          workflow only for those branches.</para>

          <para>This is an example to run a workflow for all target branches,
          except <emphasis>master</emphasis> and
          <emphasis>final</emphasis>:</para>

          <screen>workflow:
  steps:
    - branch_package:
        source_project: home:jane_doe
        source_package: ctris
        target_project: games
  filters:
    branches:
      ignore:
        - master
        - final </screen>

          <para>Learn more about <xref  xrefstyle="select:title"
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-filters-delimiters"/>.</para>

          <note>
            <para>
              <emphasis role="bold">tag_push</emphasis> events are not supported by the
              <emphasis role="bold">branches filter</emphasis>.
            </para>
          </note>
        </sect4>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-placeholder-variables">
        <title>Placeholder Variables</title>

        <para>With placeholder variables, workflows are now dynamic. Whenever a
        webhook event comes in, OBS downloads the workflows file and parses it.
        This is when the placeholder variables are replaced by the data they
        refer to in the webhook event payload.</para>

        <para>Here's a list of supported placeholder variables and their mapping:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>%{SCM_ORGANIZATION_NAME}</emphasis>: The name of the SCM
            organization, like <emphasis>openSUSE</emphasis> for the GitHub repository
            <emphasis>openSUSE/open-build-service</emphasis>.</para>
          </listitem>

          <listitem>
            <para><emphasis>%{SCM_REPOSITORY_NAME}</emphasis>: The name of the SCM
            repository, like <emphasis>open-build-service</emphasis> for the GitHub repository
            <emphasis>openSUSE/open-build-service</emphasis>.</para>
          </listitem>

          <listitem>
            <para><emphasis>%{SCM_PR_NUMBER}</emphasis>: The number of the pull/merge
            request from which the webhook event originates. This placeholder variable should be defined
            in workflows running only for pull request webhook events.</para>
          </listitem>

          <listitem>
            <para><emphasis>%{SCM_COMMIT_SHA}</emphasis>: The SHA of the commit from
            which the webhook event originates.</para>
          </listitem>
        </itemizedlist>

        <para>Below is an example of a workflow with a placeholder variable:</para>

        <screen># The test_build workflow will branch a package based on the SCM repository name from which the webhook event came from.
test_build:
  steps:
    - branch_package:
        source_project: games
        source_package: %{SCM_REPOSITORY_NAME}
        target_project: games:CI
  filters:
    event: pull_request</screen>

        <para>For a more in-depth example in combination with configuration file
        location, refer to
        <xref linkend="sec-obs-obs-scm-ci-workflow-integration-use-cases-config-url-and-placeholder-variables"/>.</para>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-status-reporting">
      <title>Status Reporting</title>

      <para>Once all the steps in the workflow are done, OBS will report the build results back to GitHub.</para>

      <para>OBS will show detailed package build status for each distribution
      and architecture you have set up in the configuration file.</para>

      <figure>
        <title>Build Status</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="commit_status.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Moreover, if your package builds several multibuild flavors, the status will
      have the <link
      xlink:href="https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.multibuild.html">flavor</link>
      name appended to the package name:</para>

      <figure>
        <title>Build Status for Several Multibuild Flavors</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="commit_status_multibuild.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>Due to a limitation, the <emphasis role="bold">initial</emphasis>
        "pending" build status of packages with multibuild flavors is <emphasis role="bold">not</emphasis>
        reported. The build status for those flavors will however still be reported
        when the build finishes.</para>
      </note>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-workflow-runs">
      <title>Workflow Runs</title>

      <para>For every SCM event, OBS compiles relevant information about the workflows running on the system. You can find the
      so-called "Workflow Runs" under the list of tokens.</para>

      <figure>
        <title>Tokens list</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="tokens_ui_index_with_workflow_run.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>From the list of workflow runs, you can get information like:</para>

      <itemizedlist>
        <listitem><para>the status (running/fail/success) represented by icons,</para></listitem>
        <listitem><para>the type of event and action,</para></listitem>
        <listitem><para>links to the SCM repository, pull/merge request or commit involved,</para></listitem>
        <listitem><para>the time when the workflow was triggered</para></listitem>
      </itemizedlist>

      <figure>
        <title>Workflow Runs</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="workflow_runs_list.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Click on each workflow run to get detailed information about it. OBS records the request received from the SCM,</para>
      <figure>
        <title>Workflow Runs - Request</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="workflow_runs_request.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>the response sent back to the SCM,</para>
      <figure>
        <title>Workflow Runs - Response</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="workflow_runs_response.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>and the artifacts used or generated during the run of each workflow.</para>
      <figure>
        <title>Workflow Runs - Artifacts</title>
        <mediaobject>
          <imageobject>
            <imagedata width="50%"
                      fileref="workflow_runs_artifacts.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>These records will help with debugging workflows. If an error occurs in any of the workflow steps,
      the workflow run will record error messages. And reading the artifacts will help to understand what happened behind the scenes.</para>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-errors">
      <title>Errors</title>

      <table>
        <title>Common Errors</title>

        <tgroup align="left" cols="2">
          <thead>
            <row>
              <entry>Error</entry>

              <entry>Reason</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><emphasis>"Project not found"</emphasis></entry>

              <entry>Make sure the projects you declared in the
              .obs/workflows.yml file exist in your OBS instance.</entry>
            </row>

            <row>
              <entry><emphasis>"Package not found"</emphasis></entry>

              <entry>Make sure the packages you declared in the
              .obs/workflows.yml file exist in your OBS instance.</entry>
            </row>

            <row>
              <entry>No build result updates are displayed in your
              PR/MR</entry>

              <entry>Make sure there are repositories defined on your source
              project. Another reason can be that the build did not start because
              your package is "unresolvable" or "broken".</entry>
            </row>

            <row>
              <entry>The project in OBS doesn't get updated with the latest
              changes in the SCM.</entry>

              <entry>For certain steps you need to set up a
              <emphasis>_service</emphasis> file. Follow the <link
              xlink:href="https://github.com/openSUSE/obs-service-tar_scm#user-documentation">obs-service-tar_scm</link>
              documentation.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-equivalence-table">
      <title>Equivalence Table</title>

      <table>
        <title>Equivalence table</title>

        <tgroup align="left" cols="3">
          <thead>
            <row>
              <entry>GitHub</entry>
              <entry>GitLab</entry>
              <entry>Gitea</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Repository</entry>
              <entry>Project</entry>
              <entry>Repository</entry>
            </row>

            <row>
              <entry>Pull request</entry>
              <entry>Merge request</entry>
              <entry>Pull request</entry>
            </row>

            <row>
              <entry>PR</entry>
              <entry>MR</entry>
              <entry>PR</entry>
            </row>

            <row>
              <entry>Push</entry>
              <entry>Push Hook</entry>
              <entry>Push</entry>
            </row>

            <row>
              <entry>Pull requests (in webhook configuration)</entry>
              <entry>Merge request events (in webhook configuration)</entry>
              <entry>Pull Request (in webhook configuration)</entry>
            </row>

            <row>
              <entry>Pushes (in webhook configuration)</entry>
              <entry>Push events (in webhook configuration)</entry>
              <entry>Push (in webhook configuration)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="sec-obs-obs-scm-ci-workflow-integration-setup-event-action-and-status-report-table">
    <title>SCM/CI Workflow Steps Reference Table</title>
    <para>For each step, this table shows which event on the SCM will trigger which operations on the OBS.</para>

    <table>
      <title>Workflow Steps reference table</title>
      <tgroup align="left" cols="8">
        <thead>
          <row>
            <entry>SCM event and action</entry>
            <entry>branch_package step</entry>
            <entry>submit_request step</entry>
            <entry>link_package step</entry>
            <entry>rebuild_package step</entry>
            <entry>trigger_services step</entry>
            <entry>configure_repositories step</entry>
            <entry>set_flags step</entry>
          </row>
        </thead>

        <tbody>
          <row><!-- PR open -->
            <entry>Pull Request opened</entry>
            <entry><!-- branch_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be branched to
              <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{source_package}</envar>
              The <envar>%{SCM_COMMIT_SHA}</envar> will be updated in the file <filename>_branch_request</filename>
              or in the <envar>scmsync</envar> attribute of the package.
              This will trigger a run of the services, which will trigger a rebuild.
              The build results of the branched package will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- submit_request -->
              Create a submit request from <envar>%{source_project}/%{source_package}</envar>
              to <envar>%{target_project}/%{target_package}</envar>.
              The request status changes will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- link_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be linked into
              <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{source_package}</envar>
              The <envar>%{SCM_COMMIT_SHA}</envar> will be updated in the <envar>scmsync</envar> attribute of the package.
              This will trigger a run of the services, which will trigger a rebuild.
              The build results of the linked package will will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- rebuild_package -->
              The <envar>%{project}/%{package}</envar> will be rebuild.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- trigger_services -->
              The services of <envar>%{project}/%{package}</envar> will be triggered.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- configure_repositories -->
              The repositories will be configured for the <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> project.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- set_flags -->
              The flags will be configured for the <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{package}</envar>.
              Nothing will be reported to the SCM.
            </entry>
          </row>

          <row><!-- PR update -->
            <entry>Pull Request updated</entry>
            <entry><!-- branch_package -->
              The <envar>%{SCM_COMMIT_SHA}</envar> will be updated in the file <filename>_branch_request</filename>
              or in the <envar>scmsync</envar> attribute of the
              package <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{source_package}</envar>
              This will trigger a run of the services, which will trigger a rebuild.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- submit_request -->
              Supersede the request it previously created with a new request
              from <envar>%{source_project}/%{source_package}</envar> to <envar>%{target_project}/%{target_package}</envar>.
              The request status changes will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- link_package -->
              The <envar>%{SCM_COMMIT_SHA}</envar> will be updated in in the <envar>scmsync</envar> attribute of the
              package <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{source_package}</envar>
              This will trigger a run of the services, which will trigger a rebuild.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- rebuild_package -->
              The <envar>%{project}/%{package}</envar> will be rebuild.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- trigger_services -->
              The services of <envar>%{project}/%{package}</envar> will be triggered.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- configure_repositories -->
              The repositories will be configured for the <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> project.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- set_flags -->
              The flags will be configured for the <envar>%{target_project}:PR-%{SCM_PR_NUMBER}/%{package}</envar>.
              Nothing will be reported to the SCM.
            </entry>
          </row>

          <row><!-- PR close -->
            <entry>Pull Request closed</entry>
            <entry><!-- branch_package -->
              The project <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> will be deleted.
              </entry>
            <entry><!-- submit_request -->
              The submit request will be revoked.
            </entry>
            <entry><!-- link_package -->
              The project <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> will be deleted.
            </entry>
            <entry><!-- rebuild_package -->
              This event is ignored.
            </entry>
            <entry><!-- trigger_services -->
              This event is ignored.
            </entry>
            <entry><!-- configure_repositories -->
              This event is ignored.
            </entry>
            <entry><!-- set_flags -->
              This event is ignored.
            </entry>
          </row>

          <row><!-- PR reopen -->
            <entry>Pull Request reopened</entry>
            <entry><!-- branch_package -->
              The project <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> will be restored.
              This will trigger a rebuild of the contained packages.
              The build results of the branched package will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- submit_request -->
              Create a submit request from <envar>%{source_project}/%{source_package}</envar>
              to <envar>%{target_project}/%{target_package}</envar>.
              The request status changes will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- link_package -->
              The project <envar>%{target_project}:PR-%{SCM_PR_NUMBER}</envar> will be restored.
              This will trigger a rebuild of the contained packages.
              The build results of the branched package will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- rebuild_package -->
              This event is ignored.
            </entry>
            <entry><!-- trigger_services -->
              This event is ignored.
            </entry>
            <entry><!-- configure_repositories -->
              This event is ignored.
            </entry>
            <entry><!-- set_flags -->
              This event is ignored.
            </entry>
          </row>

          <row><!-- Push -->
            <entry>Push</entry>
            <entry><!-- branch_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be branched to
              <envar>%{target_project}/%{source_package}-%{SCM_COMMIT_SHA}</envar>
              The build results of the branched package will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- submit_request -->
              Create a submit request from <envar>%{source_project}/%{source_package}</envar>
              to <envar>%{target_project}/%{target_package}</envar>.
              The request status changes will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- link_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be linked into
              <envar>%{target_project}/%{source_package}-%{SCM_COMMIT_SHA}</envar>
              The build results of the linked package will be reported to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- rebuild_package -->
              The <envar>%{project}/%{package}</envar> will be rebuild.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- trigger_services -->
              The services of <envar>%{project}/%{package}</envar> will be triggered.
              The build results will be reported back to the <envar>%{SCM_COMMIT_SHA}</envar> as commit status.
            </entry>
            <entry><!-- configure_repositories -->
              The repositories will be configured for the <envar>%{project}</envar>.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- set_flags -->
              The flags will be configured for the <envar>%{project}/%{package}</envar>.
              Nothing will be reported to the SCM.
            </entry>
          </row>

          <row><!-- Tag Push -->
            <entry>Tag Push</entry>
            <entry><!-- branch_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be branched to
              <envar>%{target_project}/%{source_package}-%{TAG_NAME}</envar>
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- submit_request -->
              Create a submit request from <envar>%{source_project}/%{source_package}</envar>
              to <envar>%{target_project}/%{target_package}</envar>.
            </entry>
            <entry><!-- link_package -->
              The <envar>%{source_project}/%{source_package}</envar> will be linked into
              <envar>%{target_project}/%{source_package}-%{TAG_NAME}</envar>
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- rebuild_package -->
              The <envar>%{project}/%{package}</envar> will be rebuild.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- trigger_services -->
              The services of <envar>%{project}/%{package}</envar> will be triggered.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- configure_repositories -->
              The repositories will be configured for the <envar>%{project}</envar>.
              Nothing will be reported to the SCM.
            </entry>
            <entry><!-- set_flags -->
              The flags will be configured for the <envar>%{project}/%{package}</envar>.
              Nothing will be reported to the SCM.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xml:id="sec-obs-obs-scm-ci-workflow-integration-versions">
    <title>SCM/CI Workflow Versions</title>
    <para>To secure the compatibility of SCM/CI workflows with new features and changes,
    we are introducing those through new versions. We specify them with a <emphasis
    role="bold">MAJOR.MINOR</emphasis> versioning scheme.
    We introduce breaking, non-backward compatible features and changes with
    major version updates. Minor updates only include backward compatible updates,
    but might require adjustments to the workflows in order to benefit from new features.
    The workflow version is specified on the toplevel of your workflow configuration
    yaml file. Right now we don't enforce to specify a version in the workflow yaml
    configuration and default to the latest minor version.</para>

    <screen>
    version: '1.0'
    workflow:
      steps:
        - link_package:
            source_project: GNOME:Factory
            source_package: gnome-shell
            target_project: home:jane:playground
    </screen>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-workflow-version-table">
      <title>Workflow Version Table</title>
      <para>Current available workflow versions and the introduced changes can be found
      in the versions table below.</para>
      <table>
        <title>Workflow Versions</title>
        <tgroup cols="2" align="left">
          <thead>
            <row>
              <entry>Version</entry>
              <entry>Changes</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>1.1</entry>
              <entry>
                <para>
                  Add alias for 'merge_request' to event filters.
                  Previously we only supported the term 'pull_request'.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases">
    <title>SCM/CI Workflow Integration Use-Cases</title>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-service">
      <title>OBS SCM Service</title>

      <para>For some of the use cases, you might want the OBS package to get
      the sources from the pull request in GitHub.</para>

      <para>For this, you can make use of the existing <link
      xlink:href="https://github.com/openSUSE/obs-service-tar_scm#user-documentation">obs-service-tar_scm</link>
      service. Your package should include a properly defined
      <emphasis>_service</emphasis> file. obs-service-tar_scm will
      automatically use the sources of the pull request that triggered
      it.</para>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-test-build-pull-request">
      <title>Test Build a Package For Every Pull Request on GitHub</title>

      <para>You decide to manage your package sources from a GitHub
      repository. However, every time someone tries to add changes to your
      sources by opening a pull request, you need to verify that your package
      still builds for certain repositories and architectures in OBS. You can
      have the best of both worlds with the <xref xrefstyle="select:title"
      linkend="sec-obs-obs-scm-ci-workflow-integration-setup"/>.</para>

      <para>You will need:</para>

      <itemizedlist>
        <listitem>
          <para>A project in OBS that you own, it will be the <emphasis>target
          project</emphasis>. Let's say:
          <emphasis>home:jane:playground</emphasis>.</para>
        </listitem>

        <listitem>
          <para>A package in OBS that you want to test build, it will be the
          <emphasis>source package</emphasis> inside the source project. E.g.:
          <emphasis>GNOME:Factory/gnome-shell</emphasis>.</para>
        </listitem>

        <listitem>
          <para>A repository in GitHub with the source code that will receive
          the pull requests, e.g.:
          <emphasis>https://github.com/GNOME/gnome-shell</emphasis>.</para>
        </listitem>

        <listitem>
          <para>The required tokens to allow OBS and GitHub talk each other as
          explained in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication"/></para>
        </listitem>

        <listitem>
          <para>The required webhooks so GitHub notifies OBS of any event as
          explained in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks"/></para>
        </listitem>
      </itemizedlist>

      <para>This is obviously a good candidate to use the <xref xrefstyle="select:title"
      linkend="sec-obs-obs-scm-ci-workflow-integration-use-cases-service"/>.</para>

      <para>There are two different strategies to do this: <emphasis
      role="bold">branching</emphasis> the package or <emphasis
      role="bold">linking</emphasis> to it.</para>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-test-build-pull-request-branch">
        <title>Branch</title>

        <para>If you decide to branch the package for the test build, the
        configuration file should be something like this:</para>

        <screen>workflow:
  steps:
    - branch_package:
        source_project: GNOME:Factory
        source_package: gnome-shell
        target_project: home:jane:playground
  filters:
    event: pull_request</screen>

        <para>Whenever someone opens a new pull request in the repository, OBS
        will branch the <emphasis>source package</emphasis> onto the
        <emphasis>target project</emphasis>, trigger the build, and report the
        results in the pull request's status checks.</para>

        <para>Keep in mind that, when OBS branches a package, it copies the
        repositories from the <emphasis>source project</emphasis> to the
        <emphasis>target project</emphasis>, so everything is ready to start
        building.</para>

        <para>Once the pull request is accepted or closed, the branched
        package will be deleted.</para>

        <para>Read <xref xrefstyle="select:title"
        linkend="sec-obs-obs-scm-ci-workflow-integration-setup"/> and,
        specifically, the workflow steps (<xref
        linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-steps"/>).</para>
      </sect3>

      <sect3 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-test-build-pull-request-link-configure-repositories">
        <title>Link and Configure Repositories</title>

        <para>If you prefer to link the package for the test build, the
        configuration file should be something like this:</para>

        <screen>workflow:
  steps:
    - link_package:
        source_project: GNOME:Factory
        source_package: gnome-shell
        target_project: home:jane:playground
    - configure_repositories:
        project: home:jane:playground
        repositories:
          - name: openSUSE_Tumbleweed
            paths:
              - target_project: openSUSE:Factory
                target_repository: snapshot
            architectures:
              - x86_64
              - i586
          - name: openSUSE_Leap_15.2
            paths:
              - target_project: openSUSE:Leap:15.2
                target_repository: standard
            architectures:
              - x86_64
  filters:
    event: pull_request</screen>

        <para>Whenever someone opens a new pull request in the repository, OBS
        will create a <emphasis>target package</emphasis> linked to the
        <emphasis>source package</emphasis>.</para>

        <para>Unlike the branching, in this case the repositories are not copied to the
        <emphasis>target project</emphasis>. That is why you need to set up
        the <emphasis>configure_repositories</emphasis> step giving you the
        flexibility to decide which repositories are you interested in.</para>

        <para>Read <xref xrefstyle="select:title"
        linkend="sec-obs-obs-scm-ci-workflow-integration-setup"/> and,
        specifically, the workflow steps (<xref
        linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-steps"/>).</para>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-rebuild-package-for-every-change">
      <title>Rebuild a Package for Every Change in a Branch</title>

      <para>You have a test build set up and you want it to keep up to date
      with the new changes you add to the PR. One way to do it, is to
      configure a rebuild package step with a push event filter.</para>

      <para>You need:</para>

      <itemizedlist>
        <listitem>
          <para>A project and package to test build. E.g.:
          <emphasis>home:jane/rust</emphasis></para>
        </listitem>

        <listitem>
          <para>A repository in GitHub with an opened PR. E.g.:
          <emphasis>https://github.com/jane/rust/pull/1</emphasis></para>
        </listitem>

        <listitem>
          <para>The required tokens to allow OBS and GitHub talk each other as
          explained in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication"/></para>
        </listitem>

        <listitem>
          <para>The required webhooks so GitHub notifies OBS of any event as
          explained in <xref
          linkend="sec-obs-obs-scm-ci-workflow-integration-setup-webhooks"/></para>
        </listitem>

        <listitem>
          <para>The source code synchronization setup with the <xref xrefstyle="select:title"
          linkend="sec-obs-obs-scm-ci-workflow-integration-use-cases-service"/>.</para>
        </listitem>
      </itemizedlist>

      <para>The workflow configuration should be like this one:</para>

      <screen>workflow:
  steps:
    - rebuild_package:
        project: home:jane
        package: rust
  filters:
    event: push</screen>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-set-flags">
      <title>Set Flags on a Package to Disable Builds for an Architecture</title>

      <para>When you branch a package, all its repositories and their architectures will be copied over.
      For this package, you might want to disable builds for a certain repository or architecture. This is
      possible with the <emphasis>set_flags</emphasis> step.</para>

      <para>The workflow configuration should be like this one:</para>

      <screen>workflow:
  steps:
    - branch_package:
        source_project: home:jane_doe
        source_package: rust
        target_project: home:jane_doe:CI
    - set_flags:
        flags:
          - type: build
            status: disable
            project: home:jane_doe:CI
            package: rust
            architecture: x86_64</screen>
      <para></para>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-create-package-releases-with-tags">
      <title>Create Package on OBS for Every Software Release With Git Tags</title>

      <para>You have a software project for which you mark releases with Git tags. For every release, you want to create
      a package on OBS. This can be automated in a workflow with the <emphasis>branch_package</emphasis> step and the
      <emphasis>tag_push</emphasis> event filter. Once the workflow is in place, every tag you push to your SCM repository
      will branch a package on OBS and create, then build a package for the source code associated to the tag's commit.
      This way, your users can always install a versioned release of your software project. You can also link one of those
      versioned releases to another project on OBS if you need it as a dependency.</para>

      <para>After the usual setup for
      OBS workflows with tokens and webhooks (see <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup"/>), you will need:</para>

      <itemizedlist>
        <listitem>
          <para>A package in OBS that you own, and for which you want to create releases. It will be the
          <emphasis>source package</emphasis> (e.g.: <emphasis>home:jane/my_package</emphasis>) and it will
          contain a <emphasis>_service</emphasis> file. When this package is branched by the
          <emphasis>branch_package</emphasis> step, the branched package name will end with the name of the tag which
          was pushed (e.g.: <emphasis>my_package-1.0</emphasis>).</para>
        </listitem>

        <listitem>
          <para>A project in OBS that you own, and which will contain all packages created by the <emphasis>branch_package</emphasis>
          step. It will be the <emphasis>target project</emphasis> (e.g.: <emphasis>home:jane:releases</emphasis>).</para>
        </listitem>

        <listitem>
          <para>A SCM repository for your software project with the source code and spec file in which you
          will create Git tags to mark releases, e.g.: <emphasis>https://github.com/jane/my_package</emphasis>.</para>
        </listitem>
      </itemizedlist>

      <para>The workflow configuration should be like this one:</para>

      <screen>workflow:
  steps:
    - branch_package:
        source_project: home:jane
        source_package: my_package
        target_project: home:jane:releases
  filters:
    event: tag_push</screen>

      <para>The <emphasis>_service</emphasis> file in your source package should be like:</para>

      <screen>&lt;?xml version=&quot;1.0&quot;?&gt;
  &lt;services&gt;
    &lt;service name=&quot;obs_scm&quot;&gt;
      &lt;param name=&quot;versionformat&quot;&gt;@PARENT_TAG@&lt;/param&gt;
      &lt;param name=&quot;url&quot;&gt;https://github.com/jane/my_package.git&lt;/param&gt;
      &lt;param name=&quot;scm&quot;&gt;git&lt;/param&gt;
      &lt;param name=&quot;revision&quot;&gt;@PARENT_TAG@&lt;/param&gt;
      &lt;param name=&quot;extract&quot;&gt;my_package.spec&lt;/param&gt;
    &lt;/service&gt;
    &lt;service name=&quot;set_version&quot;/&gt;
    &lt;service name=&quot;tar&quot; mode=&quot;buildtime&quot;/&gt;
  &lt;/services&gt;</screen>

      <para>Here's an explanation of the services involved:</para>

      <itemizedlist>
        <listitem>
          <para>The <link xlink:href="https://github.com/openSUSE/obs-service-tar_scm#obs_scm">obs_scm</link> service fetches
          the source code from your SCM repository for a specific revision, which in this case, is for the latest tag
          (<emphasis>@PARENT_TAG@</emphasis>). Don't forget to extract the spec file with a <emphasis>extract</emphasis> element.</para>

          <para>Set the <emphasis>versionformat</emphasis> to match how you want to name your releases. This is typically
          the Git tag name, so <emphasis>@PARENT_TAG@</emphasis> is what you should use. For other options, refer to
          <link xlink:href="https://git-scm.com/docs/git-log">git log</link> and its <emphasis>format:&lt;format-string&gt;</emphasis>
          documentation.</para>
        </listitem>

        <listitem>
          <para>The <link xlink:href="https://github.com/openSUSE/obs-service-set_version">set_version</link> service updates the
          <emphasis>Version</emphasis> directive in the spec file downloaded by the <emphasis>obs_scm</emphasis> service. The version
          format comes from the <emphasis>versionformat</emphasis> element under the <emphasis>obs_scm</emphasis> service.</para>
        </listitem>

        <listitem>
          <para>The <link xlink:href="https://github.com/openSUSE/obs-service-tar_scm#tar">tar</link> service creates a tarball out of
          the source code fetched by the <emphasis>obs_scm</emphasis> service.</para>
        </listitem>
      </itemizedlist>

      <para>For the spec file in your SCM repository, pay attention to this:</para>

      <itemizedlist>
        <listitem>
          <para>The <emphasis>Source0</emphasis> directive is based on values you provided to the <emphasis>obs_scm</emphasis> service
          in the <emphasis>_service</emphasis> file and it should be like this: <emphasis>my_package-%{version}.tar</emphasis>.</para>

          <para>The first part is the SCM repository name (e.g: <emphasis>my_package</emphasis>). The second part is the version
          macro which will be expanded to match what you defined in the <emphasis>versionformat</emphasis> of the
          <emphasis>obs_scm</emphasis> service in the <emphasis>_service</emphasis> file. The third part is the archive extension
          (<emphasis>.tar</emphasis>) since a tarball was created by the <emphasis>tar</emphasis> service.</para>
        </listitem>

        <listitem>
          <para>Under the <emphasis>%prep</emphasis> directive, you might have to update the <emphasis>%setup</emphasis> directive
          if your source package name doesn't match the name of your SCM repository. Here's how, with <emphasis>my_package</emphasis>
          being the SCM repository name:</para>

          <screen>%prep
  %setup -q -n my_package-%version
          </screen>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 xml:id="sec-obs-obs-scm-ci-workflow-integration-use-cases-config-url-and-placeholder-variables">
      <title>Using a Custom Configuration File URL in Combination with Placeholder Variables</title>

      <para>It may happen that you have multiple repositories following the same
      set of workflow steps, and you would rather have one copy of the configuration
      file stored in a single place and applied to multiple workflows. This can be
      done with the combination of placeholder variables and the configuration
      file url setting</para>

      <para>Let's say you have the following configuration file that works with
      your SCM repository called <emphasis>gnome-shell</emphasis></para>

      <screen>workflow:
  steps:
    - branch_package:
        source_project: "test-project"
        source_package: "gnome-shell"
        target_project: "test-target-project"
  filters:
    event: pull_request</screen>

      <para>If you replace <emphasis>gnome-shell</emphasis> with
      <emphasis>%{SCM_REPOSITORY_NAME}</emphasis> like so:</para>

      <screen>workflow:
  steps:
    - branch_package:
        source_project: "test-project"
        source_package: "%{SCM_REPOSITORY_NAME}"
        target_project: "test-target-project"
  filters:
    event: pull_request</screen>

      <para>It will perform just as well as it did before, however now
      this configuration can be applied to any other OBS package in the
      <emphasis>test-project</emphasis> and SCM repository combination assuming
      they have the same name.</para>

      <para>From here the only thing left to do would be to host this file
      somewhere where OBS can access it, creating a workflow token and the
      corresponding webhooks (following the setup instructions at <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup-token-authentication"/>)
      for every SCM repository you want this configuration file to apply to,
      making sure you set the correct configuration url (see <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-config-location"/>).</para>

      <para>There are many other ways to use these two features in parallel,
      make sure to read
      <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-placeholder-variables"/>
      and <xref linkend="sec-obs-obs-scm-ci-workflow-integration-setup-obs-workflows-config-location"/>
      to get some inspiration on how you can use them in your project.</para>
    </sect2>
  </sect1>
</chapter>
