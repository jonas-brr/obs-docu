<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-authorization-token"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Authorization</title>
 <info/>

 <sect1>
  <title>&obsa; Authorization Methods</title>
  <para> Each package is signed with a PGP key to allow checking its integrity
   on user's machines. </para>
  <sect2>
   <title>Default Mode</title>
   <para> OBS provides its own user database which can also store a password.
    The authentication to the API happens via HTTP BASIC AUTH. See the API
    documentation to find out how to create, modify or delete user data. Also a
    call for changing the password exists. </para>
  </sect2>
  <sect2>
   <title>Proxy Mode</title>
   <para> The proxy mode can be used for esp. secured instances, where the OBS
    web server shall not get connected to the network directly. There are
    authentication proxy products out there which do the authentication and
    send the user name via an HTTP header to OBS. This also has the advantage
    that the user password never reaches OBS. </para>
  </sect2>
  <sect2>
   <title>LDAP Mode</title>
   <para> LDAP authentication code is still part of OBS, but due to the lack of
    any test cases it is currently not recommended to use it. </para>
  </sect2>
 </sect1>
 <sect1>
  <title>&obsa; Token Authorization</title>
  <para> &obsa; provides a mechanism to create tokens for specific operations.
   This can be used to allow certain operations in the name of a user to
   others. This is esp. useful when integrating external infrastructure. The
   create token should be kept secret by default, but it can also be revoked at
   any time if it became obsolete or leaked. </para>
  <sect2>
   <title>Managing User Tokens</title>
   <para> Tokens always belong to a user. A list of active tokens can be viewed
    using </para>
   <screen><command>osc token</command></screen>
   <screen><command>osc token --delete &lt;TOKEN&gt;</command></screen>
  </sect2>
  <sect2>
   <title>Executing an Action</title>
   <para> A token can be used to execute specific operations. This can be a 
	   source service trigger, a rebuild call, or release action. The setup needs
	   to be prepared for the action. For example a source service for that can
	   be setup with:</para>
   <screen><command>osc</command> add git://....</screen>
   <para> The best way to create a token is bind it to a specific package. The
    advantage is that the operation is limited to that package, so less bad
    things can happen when the token leaks. </para>
   <screen><command>osc</command> token --create &lt;PROJECT&gt; &lt;PACKAGE&gt;</screen>
   <para> Also, you do not need to specify the package at execution time. But
    keep in mind that such form only works when you run it on an as checkout of
    a package. Both commands below do the same thing but in a different way:
   </para>
   <screen><command>osc</command> token --trigger &lt;TOKEN&gt;</screen>
   <screen><command>osc</command> api -X POST /trigger/runservice?token=&lt;TOKEN&gt;</screen>
   <para> A token can be registered as generic token, means allowing to execute
    all source services in OBS if the user has permissions. You can create such
    a token by skipping project/package on creation command: </para>
   <screen><command>osc</command> token --create</screen>
   <para>
    In this case, you are forced to specify project/package along with the
    token. On the other hand, you are not limited from where you execute it.
    Again, two examples doing same thing:
   </para>
   <screen><command>osc</command> token --trigger &lt;TOKEN&gt; &lt;PROJECT&gt; &lt;PACKAGE&gt;</screen>
   <screen><command>curl</command> -H "Authorization: Token &lt;TOKEN&gt;" -X POST https://$obs_instance/trigger/runservice?project=&lt;PROJECT&gt;&amp;package=&lt;PACKAGE&gt;</screen>
   <para> You can also limit the token to a specific package. The advantage is
    that the operation is limited to that package, so less bad things can
    happen when the token leaks. Also you do not need to specify the package on
    execution time. Create and execute it with:</para>
   <screen><command>osc</command> token --create &lt;PROJECT&gt; &lt;PACKAGE&gt;</screen>
   <screen><command>osc</command> token --trigger &lt;TOKEN&gt;</screen>
   <screen><command>curl</command> -H "Authorization: Token &lt;TOKEN&gt;" -X POST /trigger/runservice</screen>

   <para>A token to rebuild a package can be created and trigger by </para>
   <screen><command>osc</command> token --opertion rebuild --create &lt;PROJECT&gt; &lt;PACKAGE&gt;</screen>
   <screen><command>osc</command> token --operation rebuild --trigger &lt;TOKEN&gt;</screen>
   <screen><command>curl</command> -H "Authorization: Token &lt;TOKEN&gt;" -X POST https://$obs_instance/trigger/rebuild</screen>

   <para>A token to release a package can be created and trigger by </para>
   <screen><command>osc</command> token --opertion release --create &lt;PROJECT&gt; &lt;PACKAGE&gt;</screen>
   <screen><command>osc</command> token --operation release --trigger &lt;TOKEN&gt;</screen>
   <screen><command>curl</command> -H "Authorization: Token &lt;TOKEN&gt;" -X POST https://$obs_instance/trigger/release</screen>
  </sect2>
  <!-- <sect2>
   <title>Changing Request Review Status</title>
   <para/>
   <remark>TBD: not yet implemented. (?)</remark>
  </sect2>-->
 </sect1>
</chapter>
