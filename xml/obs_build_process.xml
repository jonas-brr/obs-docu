<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-build-process"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Build Process</title>
 <para>
  The build process creates new binaries from sources, binaries, and config.
  This process may run on the &obsa; server side or on a
  local workstation. Each package build is created in a fresh environment. This is done to
  ensure that the environment is reproducible.
 </para>
 <sect1 condition="tbd">
  <title>Definition of a Build Process</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 <sect1>
  <title>Phases of a Build Process</title>
  <para>
   All sources and binaries which are hosted inside &obs; are organized in
   projects. Projects host sources inside of &obsa; packages. The sources are
   built according to the repository configuration inside of the project.
  </para>
  <sect2>
   <title>Preinstall Phase</title>
   <remark>
    Sounds like bad English: Preinstallation Phase, Installation Phase,
    Packaging Phase would imo sound better. Not sure whether I can do that,
    or whether this is already part of the terminology canon. - sknorr,
    2017-08-25
   </remark>
   <para>
    This phase depends on the type of the buildroot (building
    environment). &obsa; supports multiple types of build environments, for example:
   </para>
    <itemizedlist>
     <listitem>
      <para>
       chroot
      </para>
     </listitem>
     <listitem>
      <para>
       Xen
      </para>
     </listitem>
     <listitem>
      <para>
       KVM
      </para>
     </listitem>
     <listitem>
      <para>
       Qemu
      </para>
     </listitem>
    </itemizedlist>
    <para>
    In the preinstall phase, the OBS Worker creates a small
    base system from the packages declared to be preinstalled (file
    system, coreutils, binutils, rpm/debutils, etc.). The tools installed in this
    phase must only provide the minimum functionality necessary to allow installing
    further packages. In addition it copies all necessary build requirements and
    the source into the base system. </para>
  </sect2>
  <sect2>
   <title>Install Phase</title>
   <para>
    Depending on the chosen build environment, the worker may start a
    virtual machine, an emulator or just enter the build root. If this was successful, the
    install phase reinstalls all base packages from above and additionally all
    packages you have defined in your build recipe plus dependencies. After this phase the
    environment is ready to process the build recipe.
   </para>
  </sect2>
  <sect2>
   <title>Package Build</title>
   <para>
    Depending on the type of package, the build environment executes different build
    commands, for example:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      RPM-based distributions: <command>rpmbuild</command>
     </para>
    </listitem>
    <listitem>
     <para>
      Debian-based distributions: <command>dpkg-buildpackage</command>
     </para>
    </listitem>
    <listitem>
     <para>
      Arch Linux: <command>pacman</command>
     </para>
    </listitem>
    <listitem>
     <para>
      Kiwi image: <command>kiwi</command>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    How the build continues depends on the quality and the type of your build
    recipe. In most cases, the source code will be compiled now and then be
    packed into the chosen package format.
   </para>
   <para>
    To improve package quality, on RPM-based distributions there are
    additional checks provided via packages. A common toolchain for handling
    checks is for example <command>rpmlint</command>.
   </para>
  </sect2>
  <sect2>
   <title>After the Build</title>
   <para>
     The generated packages are extracted from the build environment and transferred
     back to the server by the worker. The build result might be postprocessed by
     followup build jobs. Afterwards the resulting files may get signed.
   </para>
  </sect2>
 </sect1>
 <sect1 condition="tbd">
  <title>Different Ways of Building</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 <sect1 condition="tbd">
  <title>Security Aspects</title>
  <para/>
  <remark>Only three build environments are currently considered to be secure in the sense
          that an attacker can not break out of it by providing special sources or binary packages.
          These are KVM, XEN and ZVM</remark>
 </sect1>
 <sect1>
  <title>Identify a build</title>
  <para>
    &obsa; is usually tagging each build with an identifier. This can be used to find the building
    &obsa; instance, the project, repository and exact source for a binary. This information is
    stored in some variable called DISTURL and is specified as
     <command>obs://$OBS_INSTANCE/$PROJECT/$REPOSITORY/$SOURCE_REVISION-$PACKAGE(:$FLAVOR)</command>.
    Note that the final segment, <literal>:$FLAVOR</literal>, is optional and exists only for packages built using the multibuild feature.

    The source specified via the DISTURL can be accessed by pasting the URL into the search interface
    of the &obsa; web interface. Or use the command line tool to check it out:
  </para>
  <screen><command># osc checkout $DISTURL</command></screen>
  <para>
    You need to go to the right OBS instance as this is not handled automatically yet.
  </para>
  <sect2>
   <title>Read DISTURL from an RPM</title>
   <para>
    RPM binaries contain the DISTURL as tag. It can be read from the rpm database for installed RPMs and
    also from the rpm binaries itself.
   </para>
    <screen><command># rpm -q --qf '%{DISTRL}\n' $rpm</command></screen>
  </sect2>
  <sect2>
   <title>Read DISTURL from a container</title>
   <para>
    Containers store the DISTURL as label. You will see only the DISTURL from the highest layer via
   </para>
    <screen><command># docker inspect --format '{{.Config.Labels}}' $image_id</command></screen>
    <para>
    The disturl is always set via the key 'org.openbuildservice.disturl'.
   </para>
  </sect2>
 </sect1>
</chapter>
