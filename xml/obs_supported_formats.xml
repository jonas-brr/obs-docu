<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-supported-formats"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Supported Formats</title>
 <para>
  &obs; is by design format agnostic, but it needs format specific
  support to be able to parse build descriptions and running the build.
  This chapter is focusing on describing &obs; specifics of a format.
  Either limitations or extensions of &obs; builds.
 </para>
 <sect1 xml:id="sec-obs-building-spec2rpm">
  <title>Spec File Specials (RPM)</title>
  <para>
     To create an RPM package, you need a spec file.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A file with the extension <filename class="extension">.changes</filename>
     can be used to document the package history, but it is not required.
    </para>
   </listitem>
   <listitem>
    <para>
     OBS-specific RPM macros which are set are: <literal>%_project</literal> and <literal>%_repository</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <code>#!ForceMultiVersion</code> can be used to avoid resetting the
     build counter reset on version update. This is handled automatically in
     most cases. Explicitly adding this instruction is only needed when it is
     not possible to detect whether there are subpackages defining their own
     version. This can be the case when the subpackages are created
     dynamically via external rpm macros.
    </para>
   </listitem>
   <listitem>
    <para>
      <code>#!BcntSyncTag: STRING</code> defines the build counter sync tag in a spec file.
      It is used when the bcntsynctag element tag is not defined in package meta. Also it can
      depend on architecture, repository or flavor for example.
    </para>
   </listitem>
   <listitem>
    <para>
        <code>#!BuildConflicts: STRING</code> defines a conflicting package or dependency at build time only.
    </para>
   </listitem>
   <listitem>
    <para>
     <code>#!BuildIgnore: STRING</code> ignores a dependency at build time.
    </para>
   </listitem>
   <listitem>
    <para>
     <code>#!BuildRequires: STRING</code> Requires a build dependency. Usually the rpm native BuildRequires
     is the better way to define this. Use this tag only when the dependency should only exist when using
     the build script or OBS.
    </para>
   </listitem>
   <listitem>
    <para>
	    <code>#!needsrootforbuild</code> The build will be executed by root user. Please note that this must
    be permitted either by the OBS admin (via the BSConfig.pm configuration) or enabled in via build configuration rule. Also osc requires an additional parameter for local build (--userootforbuild).</para>
   </listitem>
   <listitem>
    <para>
	    <code>#!needsslcertforbuild</code> This will prepare an SSL certification based on the project key. It is
	    used to create secure boot enabled packages usually. Please note that this will fail, if the project
	    still has an old DSA key.
</para>
   </listitem>
   <listitem>
    <para>
	    <code>#!needsappxsslcertforbuild</code> Creates an appx compatible ssl certificate based on the project key.
            Please note that this will fail, if the project still has an old DSA key.
</para>
   </listitem>
   <listitem>
    <para>
	    <code>#!needsbinariesforbuild</code> All package files are usually removed before starting the build (after finishing to setup the build environment). This marker keeps them also during build.</para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 condition="tbd">
  <title>CONTROL/RULES/DSC File Specials (Debian)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>PKGBUILD File Specials (Arch)</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Snap Containers</title>
  <remark>toms 2017-08-18: see https://snapcraft.io/docs/build-snaps/ci-integration</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>As Livebuild Images</title>
  <remark>toms 2017-08-18: see https://www.debian.org/devel/debian-live/</remark>
  <para/>
  <remark>TBD</remark>
 </sect1>


 <sect1>
  <title>OBS Extensions for (&kiwi;) Appliance Builds</title>
   <!--
    1. Create a repository in a project
       - enable all architectures
       - path elements are optional if they are defined in KIWI's XML config file
    2. Create project config, setting repo to
       - Type: kiwi
       - Repotype: none
    3. Create a package
    4. Submit adapted KIWI config files

    Things to watch for:
    * config.xml needs to have a .kiwi suffix
    * Repos needs to be specified as obs://$PROJECT/$REPO or using http:// Urls which can be mapped
      by OBS.
    * Content of root directory as root.tar.bz2 or root.obscpio
    * If you get the error "have choice", select a package and add it to
      the package list
    *
   -->
   <para>
	&kiwi; appliance builds create images which can be used for direct consumption. Note: builds in non-VM
	environments do fail often due to the bootloader setup. Use <command>osc build --vm-type=kvm</command> for local building.
	OBS is evaluating kiwi builds at least two times. One time for the build host dependencies and another
	time for the target distribution used inside of the image. For container builds a third evaluation
	happens to find the base container.
   </para>
   <para>
     &kiwi; builds inside of OBS need to fulfill following requirements:
   </para>
  <itemizedlist>
   <listitem>
     <para><filename>config.xml</filename> files need to be renamed to a filename with <filename class="extension">.kiwi</filename> suffix. </para>
   </listitem>
   <listitem>
     <para>repositories which are used must use either a URL which starts with the OBS download prefix or they must
  	   be written in <uri>obs://PROJECT/REPOSITORY</uri> syntax. </para>
   </listitem>
  </itemizedlist>

   <para>
     OBS extends kiwi functionality with following options. These covers cases which would need explicit
     command line commands, so they are covered via the tags to have them in a reproducible way.
   </para>

  <itemizedlist>
   <listitem>
     <para>A repository defined as <uri>obsrepositories:/</uri> will used the expanded list of repositories as defined in the project meta.
           This is useful when moving kiwi image descriptions between projects, for example for development and release builds. </para>
   </listitem>
   <listitem>
     <para>Defining build counter sync tag <command>OBS-BcntSyncTag: STRING</command>
     </para>
   </listitem>
   <listitem>
     <para>An exclusive architecture list to build for can be defined with an xml comment <command>OBS-ExclusiveArch: ARCH_LIST</command>
     </para>
   </listitem>
   <listitem>
     <para>An excluded architecture list to skip builds can be defined with an xml comment <command>OBS-ExcludeArch: ARCH_LIST</command>
     </para>
   </listitem>
   <listitem>
     <para>A list of profiles to build can be defined via an xml comment <command>OBS-Profiles: PROFILE_LIST</command>
     </para>
     <para>This can also be handled via _multibuild flavor lists by setting a fixed string of <command>OBS-Profiles: @BUILD_FLAVOR@</command>
     </para>
   </listitem>
   <listitem>
     <para>Packages get picked usually in a fixed order from the most important repository in &obsa;. This happens independently
      of the version number of the packages. Set the xml comment <command>OBS-UnorderedRepos</command> to disable the repository order handling and to have a more similar behavior as with plain package manager builds. Note: this can result into switching
  	 repositories between builds and is therefore less reproducible.
     </para>
   </listitem>
   <listitem>
     <para>Container builds can specify a specific repository which shall be used for searching the base container.
      Use the XML comment <command>OBS-Imagerepo:$REPOSITORY_URL</command> for this. The repository URL may be
  	   in <uri>obs://$PROJECT/$REPOSITORY</uri> style.
     </para>
   </listitem>
   <listitem>
     <para>Container builds can specify additional tags via <command>OBS-AddTag:$TAG</command> (&kiwi; limits it to one tag)
  	   in <uri>obs://$PROJECT/$REPOSITORY</uri> style.
     </para>
   </listitem>
   <listitem>
     <para>A predefined milestone <command>OBS-Milestone: milestone</command>
     </para>
     <para>
      This defines a milestone name (for example, <literal>Beta1</literal>)
      which will be applied during release operations. The candidate will
      receive its final tag then.
     </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1>
  <title>OBS Extensions for Dockerfile based builds</title>
   <!--
    1. Create a repository in a project
       - enable all architectures
       - path elements are optional if defined via zypper ar commands
    2. Create project config, setting repo to
       - Type: docker
       - BuildEngine: podman (optional)
       - Repotype: none
    3. Create a package
    4. Submit Dockefile

   -->
   <para>
	OBS needs to parse RUN commands to detect build dependencies (repositories and packages).
       Currently calls from zypper, apt-get, yum and dnf are supported.
       Additional downloads need to be covered by source services. This ensures reproducible
       builds and a safe build environment without network access.
   </para>

   <para>
     OBS extends Docker functionality with the below tags.
     Instead of these options, you would otherwise need explicit command-line commands.
     However, to make it possible to create reproducible builds, use the OBS tags.
   </para>

  <itemizedlist>
   <listitem>
      <para>A <command>#!UseOBSRepositories</command> tag will use the expanded list of repositories as defined via path elements in the project meta.
           This is useful when moving descriptions between projects, for example for development and release builds. </para>
   </listitem>
   <listitem>
    <para>
     The tag <command>#!UnorderedRepos</command> will disable the
     repository prioritization for build dependencies.
     This behavior is similar to plain Docker tooling.
     It introduces the risk that with each build another repository is
     prioritized or that dependency problems of newer package versions
     are hidden.
 </para>
   </listitem>
   <listitem>
     <para><command>#!BcntSyncTag: TAG</command> to define the build counter sync tag.
     </para>
   </listitem>
   <listitem>
     <para><command>#!BuildTag: TAG</command> to define one or multiple tags to be used for the container.
     </para>
   </listitem>
   <listitem>
     <para><command>#!BuildName: NAME</command> Report back a defined NAME. Otherwise it gets derived from the first tag, replacing all / and : with - characters.
     </para>
   </listitem>
   <listitem>
     <para><command>#!BuildVersion: VERSION</command> Report back a defined VERSION. By default it is set to zero. The version is used by OBS for tracking. This needs to be set together with BuildName, otherwise it will be ignored.
     </para>
   </listitem>
   <listitem>
     <para><command>#!ExclusiveArch: ARCH_LIST</command> An exclusive architecture list to build for. The architecture list is separated by spaces.
     </para>
   </listitem>
   <listitem>
     <para><command>#!ExcludeArch: ARCH_LIST</command> An excluded architecture list to skip builds. The architecture list is separated by spaces.
     </para>
   </listitem>
   <listitem>
     <para><command>#!ArchExclusiveLine: ARCH_LIST</command> The next line will only be considered by the scheduler the listed architectures. The line will still get executed on all architectures during the build.
     </para>
   </listitem>
   <listitem>
     <para><command>#!ArchExcludedLine: ARCH_LIST</command> The next line will not be considered by the scheduler on the listed architectures. The line will still get executed on all architectures during the build.
     </para>
   </listitem>
   <listitem>
     <para>
      <command>#!Milestone: MILESTONE</command>
      This defines a milestone name (for example, <literal>Beta1</literal>)
      which will be applied during release operations. The candidate will
      receive its final tag then.
     </para>
   </listitem>
   <listitem>
     <para>
      <command>#!NoSquash</command> disables the squashing of all layers created
      during the build to a single layer. Without this, every RUN line is an additional layer.
     </para>
   </listitem>
  </itemizedlist>

  <para>
    The used filename of the build results are only important inside of OBS. The publishing 
    happens via the built-in registry interface which is providing all defined tags for an image.
    The filename itself may be used on aggregates or other binary filters in OBS. It is either 
    derived by the first defined tag or by the BuildName and BuildVersion tag if both are defined.
   </para>
 </sect1>

 <sect1 condition="tbd">
  <title>As &obs.pimg;</title>
  <remark>toms 2017-08-18: integrate content from  obs_build_preinstall.xml;
  using a _preinstallimage file</remark>
 </sect1>

 <!--
 <sect1 condition="tbd">
  <title>Mkosi Image Builds</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
 -->

</chapter>
