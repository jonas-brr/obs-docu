<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-source-management"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Source Management</title>
 <info/>

 <sect1>
  <title>Find Package Sources</title>
  <para> OBS is adding information to each created package about the origin of
   the sources. This information is stored in the <command>DISTURL</command>
   tag of an rpm, which can be displayed as follows:</para>
   <screen><command>rpm -q --queryformat '%{DISTURL}\n' glibc</command>
<command>rpm -q --queryformat '%{DISTURL}\n' -p glibc-2.1.0-1.i586.rpm</command></screen>
   <para>The disturl can look like this:
    <command>obs://build.opensuse.org/openSUSE:Factory/standard/80d21fdd2299302358246d757b4d8c4f-glibc</command>
   It always starts with <filename>obs://</filename>. The second part is the name of the build
   instance, which usually also hosts the Web UI. Next comes the project name
   and the repository name where the binary got built. Last part is the source
   md5 sum and the package name. </para>
  <para> The disturl can also be entered in the search field of the web
   interface of the build service. </para>
  <para>rpm packages managed via the scmsync mechanic may have also the VCS tag.
  It provides the git repository URL when the project is build using the
  </para>
    <screen><command>BuildFlags: setvcs</command></screen>
 <para>
    flag in the build config.
  </para>
 </sect1>
 <sect1>
  <title>Generating SLSA Provenance Data</title>
  <para>
          OBS 2.11 can produce and publish additional SLSA provenance attestation
          files. This files are currently following the v0.2 Alpha spec, which is
          suspect to change. We will change the code to follow the specification,
          so the files might change in an incompatible way until a stable version
          has been released.
        </para>
        <para>
          This can be enabled via the BSConfig.pm file only. The reason behind is
          that the functionality is expensive in regards of disk space. All old
          binaries used for build are kept.
          You may want to enable it nevertheless by setting the slsaprovenance variable
          in BSConfig.pm with a list of projects to enable it.</para>
 </sect1>
 <sect1>
  <title>Generating SBOM (Software Bill Of Material) Data</title>
   <para>
     OBS 2.11 can produce and publish additional SPDX data for certain build types.
     This is controlled via the project configuration. For details, refer to
     <xref linkend="sec-prjconfig-syntax"/> for
     <literal>sbom:FORMAT</literal> (under <literal>BuildFlags</literal>).
   </para>
 </sect1>
</chapter>
