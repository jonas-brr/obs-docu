<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- note: this is just a collection file atm, bigger parts should be moved to own files & chapters -->
<chapter version="5.1" xml:id="cha-obs-concepts"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>OBS Concepts</title>
 <info/>
 <para> We describe here the high-level concepts: how Open Build Service is
  designed, manages its content and is supposed to work. </para>

 <sect1>
  <title>Project Organization</title>
  <para> All sources and binaries which are hosted inside of OBS are organized
   into projects. A project is the container defining a larger task. It defines
   who is working there. </para>
  <sect2>
   <title>Project Metadata</title>
   <para> A project is configured in the project
     <command>/source/$PROJECT/_meta</command> path. It can be edited in the
    web interface using the <command>RAW Config</command> tab or via command
    line with </para>
   <screen><command>osc meta prj -e $PROJECT</command></screen> 
   <para>This file contains: </para>
   <itemizedlist>
    <listitem>
     <para> Generic description data in <command>title</command> and
       <command>description</command> elements. </para>
    </listitem>
    <listitem>
     <para> An ACL list of users and groups connected with a role. The
       <command>maintainer</command> role defines the list of users permitted
      to commit changes to the project. </para>
    </listitem>
    <listitem>
     <para> A number of flags controlling the build and publishing process
      and possible read access protections. </para>
    </listitem>
    <listitem>
     <para> A list of repositories to be created. This list defines what
      other repositories should be used, which architectures shall be built and
      build job scheduling parameters. </para>
    </listitem>
   </itemizedlist>
   <para> The following flags can be used to control the behavior of a package
    or project. Most of them can also be limited to specified repositories or
    architectures. </para>
   <itemizedlist>
    <listitem>
     <para><command>build</command> defines whether package sources should
      get built. If enabled, it signals the scheduler to trigger server-side
      builds based on events like source changes, changes of packages used in
      the build environment or manual rebuild triggers. A local build via CLI
      is possible independent of this flag. Default is enabled. </para>
    </listitem>
    <listitem>
     <para><command>publish</command> can be used to enable or disable
      publishing the build result as repository. This happens after an entire
      repository has finished building for an architecture. A publish also gets
      triggered when the publish flag is enabled after a repository finishes
      the build. Default is enabled. </para>
    </listitem>
    <listitem>
     <para><command>debuginfo</command> can be used to modify the build
      process to create debuginfo data along with the package build for later
      debugging purposes. Changing this flag does not trigger rebuilds, it just
      affects the next build. Default is disabled. </para>
    </listitem>
    <listitem>
     <para><command>useforbuild</command> is used to control if a built
      result shall be copied to the build pool. This means it will get used for
      other builds in their build environment. When this is disabled, the build
      has no influence on builds of other packages using this repository. In
      case a previous build exists the old binaries will be used. Disabling this
      flag also means that "wipe" commands to remove binary files will have no
      effect on the build pool. Changing this flag does not trigger rebuilds,
      it just affects the next build. Default is enabled. </para>
    </listitem>
    <listitem>
     <para><command>access</command> flag can be used to hide an entire
      project. This includes binaries and sources. It can only be used at
      project creation time and can just be enabled (making it public again)
      afterwards. This flag can only be used on projects. Default is enabled.
     </para>
    </listitem>
    <listitem>
     <para><command>sourceaccess</command> flag can be used to hide the
      sources, but still show the existence of a project or package. This also
      includes debug packages in case the distribution is supporting this
      correctly. This flag can only be used at package creation time. There is
      no code yet which checks for possible references to this package. Default
      is enabled. </para>
    </listitem>
    <listitem>
     <para><command>downloadbinary</command> permission still exists like
      before. However, unlike "access" and "sourceaccess" this is not a
      security feature. It is just a convenience feature, which makes it
      impossible to get the binaries via the API directly. But it is still
      possible to get the binaries via build time in any case. Default is
      enabled. </para>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2>
   <title>Project Build Configuration</title>
   <para> A project is configured in the project
     <command>/source/$PROJECT/_config</command> path. It can be edited in web
    interface in the <command>Project Config</command> tab or via one of the
    following command lines </para>
    <screen><command>osc meta prjconf -e $PROJECT</command>
<command>osc co $PROJECT _project</command></screen>
    <para>
     This file contains information on how to set up a build environment.
    </para>
  </sect2>
  <sect2>
   <title>Project Build Macro Configuration</title>
   <para> The macro configuration is part of the build configuration in
     <command>/source/$PROJECT/_config</command>. It can be added at the end
    after a <command>Macros:</command> line. </para>
  </sect2>
  <sect2>
   <title>An OBS Package</title>
   <para> An OBS Package is a sub-namespace below a project. It contains the
    specification of a single package build for all specified repositories.
   </para>
  </sect2>
 </sect1>

 <sect1 condition="tbd">
  <title>The API</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1>
  <title>The OBS Interconnect</title>
  <para> The OBS interconnect is a mechanism to connect two OBS instances. All
   content, including sources and binary build results, will be available in
   the connecting instance. Unlike other methods the instances will also notify
   each other about changes.
   <!--
 * xml example to setup
 * webui interconnect page
 * example to use sources from remote
 * example to use remote repos
 * default distro list functionality
 * limitations (chainig, submitting back, read access control)
-->
  </para>
 </sect1>

 <xi:include href="obs_concepts_dod.xml"/>
 <xi:include href="obs_concepts_scm.xml"/>

 <sect1 condition="tbd">
  <title>Attribute System</title>
  <para/>
  <remark>TBD</remark>
 </sect1>

 <sect1 condition="tbd">
  <title>Automatic Source Processing</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
</chapter>
