<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1"
 xml:id="user-and-group-management">
 <title>Managing Users and Groups</title>
 <para>The OBS has an integrated user and group management with a role based
  access rights model. In every OBS instance, at least one user need to exist
  and have the global Admin role assigned. Groups can be defined by the Admin
  and instead of adding a list of users to a project/package role user can
  be added to a group and the group will be added to a project or package
  role.</para>
 <sect2 xml:id="user-and-group-management-user-and-group-roles">
  <title>User and Group Roles</title>
  <para>The OBS role model has one global role: Admin, which can be granted
   to users. An OBS admin has access to all projects and packages via the API
   interface and the web user interface. Some menus in the Web UI do not allow
   changes by an Admin (for example, the Repository menu) as long the Admin is not a
   Maintainer for the project as well. But the same change can be done via
   editing the metadata directly. The other roles are specific to projects and
   packages and can be assigned to a user or a group.</para>
  <table frame="all" rowsep="1" colsep="1">
   <title>Roles in &obsa;</title>
   <tgroup cols="3">
    <colspec colname="col_1" colwidth="14*"/>
    <colspec colname="col_2" colwidth="42*"/>
    <colspec colname="col_3" colwidth="42*"/>
    <thead>
     <row>
      <entry align="left" valign="top"> Role </entry>
      <entry align="left" valign="top"> Description </entry>
      <entry align="left" valign="top"> Remarks</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry align="left" valign="top">
       <para>Maintainer</para>
      </entry>
      <entry align="left" valign="top">
       <para>Read and write access to projects or packages</para>
      </entry>
      <entry align="left" valign="top">
       <para/>
      </entry>
     </row>
     <row>
      <entry align="left" valign="top">
       <para>Bugowner</para>
      </entry>
      <entry align="left" valign="top">
       <para>Read access to projects or packages</para>
      </entry>
      <entry align="left" valign="top">
       <para>should be unique per package</para>
      </entry>
     </row>
     <row>
      <entry align="left" valign="top">
       <para>Reader</para>
      </entry>
      <entry align="left" valign="top">
       <para>Read access to sources</para>
      </entry>
      <entry align="left" valign="top">
       <para/>
      </entry>
     </row>
     <row>
      <entry align="left" valign="top">
       <para>Downloader</para>
      </entry>
      <entry align="left" valign="top">
       <para>Read access to the binaries</para>
      </entry>
      <entry align="left" valign="top">
       <para/>
      </entry>
     </row>
     <row>
      <entry align="left" valign="top">
       <para>Reviewer</para>
      </entry>
      <entry align="left" valign="top">
       <para>Default reviewer for a package or project</para>
      </entry>
      <entry align="left" valign="top">
       <para/>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>
 <sect2 xml:id="user-and-group-management-standalone-user-and-group-database">
  <title>Standalone User and Group Database</title>
  <para>OBS provides its own user database which can also store a password.
   The authentication to the API happens via HTTP BASIC AUTH. See the API
   documentation to find out how to create, modify or delete user data. Also a
   call for changing the password exists.</para>
  <para>Users can be added by the maintainer or if registration is allowed
   via the registration menu on the Web UI. It can be configured that a
   confirmation is needed after registration before the user may
   login.</para>
 </sect2>
 <sect2 xml:id="user-and-group-management-users-and-group-maintainers">
  <title>Users and Group Maintainers</title>
  <para>
    Administrators can create groups, add users to them, remove users from them and
    give Maintainer rights to users. This way, a maintainer will be able to also
    add, remove and give maintainer rights to other users.
  </para>
  <screen><command>osc api -d "&lt;group&gt;&lt;title&gt;&lt;group-title&gt;&lt;/title&gt;&lt;email&gt;&lt;group-email&gt;&lt;/email&gt;&lt;maintainer userid="&lt;user-name&gt;"/&gt;&lt;person&gt;&lt;person userid="&lt;user_name&gt;"/&gt;&lt;/person&gt;&lt;/group&gt;' -X PUT "/group/&lt;group-title&gt;" </command></screen>
 </sect2>
 <sect2 xml:id="user-and-group-management-gravatar-for-groups">
  <title>Gravatar for Groups</title>
  <para>In certain cases, it might be desirable to show a Gravatar for a group,
    similar to the users. In order to show a Gravatar, an email address is needed.
    Therefore, it is necessary that an admin adds an email address to the group
    through the API. This can be a achieved by
  </para>
  <screen><command>osc api -X POST "/group/&lt;group-title&gt;?cmd=set_email&amp;email=&lt;groups-email-address&gt;"</command></screen>
 </sect2>
 <sect2 xml:id="user-and-group-management-proxy-mode">
  <title>Proxy Mode</title>
  <para>The proxy mode can be used for specially secured instances, where
   the OBS web server shall not get connected to the network directly. There
   are authentication proxy products out there which do the authentication and
   send the user name via an HTTP header to OBS. Originally, this was developed
   for IChain - a legacy single login authentication method from Novell. This
   also has the advantage that the user password never reaches OBS.</para>
  <para>The proxy mode can also be used for LDAP or Active Directory, but
   only for authentication.</para>
  <important>
   <para>With enabled proxy mode the OBS trust the username in the http
    header. Since this was verified by the Web server and the Web server
    only forward requests for a verified and authenticated session, this is
    safe, as long you make sure that the direct web/API interface of the OBS is
    not reachable from the outside.</para>
  </important>
  <para>With the proxy mode the user still need to be registered in the OBS
   and all OBS roles and user properties are managed inside the OBS.</para>
  <sect3 xml:id="user-and-group-management-proxy-mode-obs-proxy-mode-configuration">
   <title>&obsa; Proxy Mode Configuration</title>
   <para>Currently the LDAP configuration is in the
     <emphasis>options.yml</emphasis> file.</para>
   <table frame="all" rowsep="1" colsep="1">
    <title>Options for Proxy Mode Configuration</title>
    <tgroup cols="4">
     <colspec colname="col_1" colwidth="29*"/>
     <colspec colname="col_2" colwidth="26*"/>
     <colspec colname="col_3" colwidth="17*"/>
     <colspec colname="col_4" colwidth="26*"/>
     <thead>
      <row>
       <entry align="left" valign="top"> Config item </entry>
       <entry align="left" valign="top"> Description </entry>
       <entry align="left" valign="top"> Values <literal>default</literal>
       </entry>
       <entry align="left" valign="top"> Remarks</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry align="left" valign="top">
        <para>proxy_auth_mode</para>
       </entry>
       <entry align="left" valign="top">
        <para>turn proxy mode on/off</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:off</literal> :on</para>
       </entry>
       <entry align="left" valign="top">
        <para>need to be :off if ldap_mode: is :on</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect3>
 </sect2>
 <sect2 xml:id="user-and-group-management-ldap-active-directory">
  <title>LDAP/Active Directory</title>
  <note>
   <para>The LDAP support was considered experimental and not officially
    supported. It is officially supported since 2.8.3 release.</para>
  </note>
  <para>Using LDAP or Active Directory as source for user and optional group
   information in environments which already have such a server has the
   advantage for the admin people that the user related information only need
   to be maintained in one place. In the following sections we are writing
   LDAP, but this includes Microsoft's Active Directory as well. Only in parts
   where differences exists Active Directory (AD) will be explicit
   mentioned.</para>
  <para>In this mode the OBS contact the LDAP server directly from the OBS
   API, if the user was found and provides the correct password the user is
   added transparently to the OBS user database. The password or password hash
   is not stored in the OBS database. Because the user database password field
   is mandatory, a random hash is stored instead. The LDAP interface allows to
   restrict the access to users which are in a special LDAP group. Optional
   also groups can be discovered from the LDAP server. This can be also
   filtered.</para>
  <para>Before anybody can add a user to a package or project with a role,
   the user need to had logged in at least one time, since the check for
   available users is local only. If the LDAP group mode is enabled, LDAP
   groups are also added transparently, if an existing group on the LDAP server
   is added to a project or package.</para>
  <para>On bigger installations this mode can result in many search requests
   to the LDAP server and slow down access to projects and packages,
   because on every role check an LDAP search operation will contact the LDAP
   server. As alternative method group mirroring was implemented. This allows
   that the internal OBS group database is updated with the group membership
   information during the user authentication. All role test are made local
   against the OBS database and do not need additional
   LDAPoperations.</para>
  <note>
   <para>The local user group membership in :mirror mode is updated as
    follows: When the user logins, the user <emphasis>memberOf</emphasis>
    attributes are parsed and compared with the global OBS grouplist, if a
    group matches, the user is added, if they are no longer a group member,
    they are removed. since this maybe a costly operation, depending on the
    group counts, this is only done on a full login. After a full login the
    user status is cashed for 2 minutes, if the user do a login during this
    time, nothing will be checked or updated. Here is a second mechanism to
    update user membership: If somebody adds a new Group in the OBS, the
     <emphasis>member</emphasis> attributes of the group are parsed and all
    current users which are in the local database become members.</para>
  </note>
  <sect3 xml:id="user-and-group-management-ldap-active-directory-obs-ldap-configuration">
   <title>OBS LDAP Configuration</title>
   <para>
    Currently the main OBS LDAP configuration is in the
    file <filename>options.yml</filename>. Beside the settings in that file, the
    openLDAP configuration file is also evaluated by the Ruby LDAP
    implementation. This configuration file is usually located at
    <filename>/etc/openldap/ldap.conf</filename>. You can set here additional
    TLS/SSL directives like
    <literal>TLS_CACERT</literal>, <literal>TLS_CACERTDIR</literal> and
    <literal>TLS_REQCERT</literal>. For more information
    refer to the openLDAP man page (<command>man ldap.conf</command>).
   </para>
   <note>
    <para>
     When LDAP mode is activated, users can only log in via LDAP. This also
     includes existing admin accounts. To make a LDAP user an admin,
     use a rake task which can be run on the &obsa; instance.
     For example, to make user <systemitem class="username">tux</systemitem>,
     use:
    </para>
    <screen>
cd /srv/www/obs/api
bundle exec rake user:give_admin_rights tux RAILS_ENV=production
    </screen>
   </note>
   <table frame="all" rowsep="1" colsep="1">
    <title>LDAP Configuration Options</title>
    <tgroup cols="4">
     <colspec colname="col_1" colwidth="29*"/>
     <colspec colname="col_2" colwidth="26*"/>
     <colspec colname="col_3" colwidth="17*"/>
     <colspec colname="col_4" colwidth="26*"/>
     <thead>
      <row>
       <entry align="left" valign="top"> Config item </entry>
       <entry align="left" valign="top"> Description </entry>
       <entry align="left" valign="top"> Values <literal>default</literal>
       </entry>
       <entry align="left" valign="top"> Remarks</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry align="left" valign="top">
        <para>ldap_mode</para>
       </entry>
       <entry align="left" valign="top">
        <para>OBS LDAP mode on/off</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:off</literal> :on</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_servers</para>
       </entry>
       <entry align="left" valign="top">
        <para>List of LDAP servers</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para>colon-separated list</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_max_attempts</para>
       </entry>
       <entry align="left" valign="top">
        <para>tries to ping LDAP server</para>
       </entry>
       <entry align="left" valign="top">
        <para>int <literal>15</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_search_timeout</para>
       </entry>
       <entry align="left" valign="top">
        <para>timeout of an LDAP search</para>
       </entry>
       <entry align="left" valign="top">
        <para>int 0…N <literal>5</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>0 wait for ever</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_user_memberof_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>User attribute for Group membership</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>memberOf</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>case sensitive</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_group_member_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Group attribute for members</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>member</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_ssl</para>
       </entry>
       <entry align="left" valign="top">
        <para>use ldaps port and protocol</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:off</literal> :on</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_start_tls</para>
       </entry>
       <entry align="left" valign="top">
        <para>usr Start TLS on LDAP protocol</para>
       </entry>
       <entry align="left" valign="top">
        <para>:off <literal>:on</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_port</para>
       </entry>
       <entry align="left" valign="top">
        <para>LDAP portnumbers</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para>if not set 389 for LDAP, 636 for LDAPS</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_referrals</para>
       </entry>
       <entry align="left" valign="top">
        <para>Windows 2003 AD requires</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:off</literal> :on</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_search_base</para>
       </entry>
       <entry align="left" valign="top">
        <para>company’s LDAP search base for the users who will use
         OBS</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>none</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_search_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>user ID attribute</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>sAMAccountName</literal> uid</para>
       </entry>
       <entry align="left" valign="top">
        <para>sAMAccountName for AD, uid for openldap</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_name_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Full user name</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>cn</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_mail_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Attribute for users email</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>mail</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_search_user</para>
       </entry>
       <entry align="left" valign="top">
        <para>Bind user for LDAP search</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para>for example, cn=ldapbind, ou=system, dc=mycompany, dc=com</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_search_auth</para>
       </entry>
       <entry align="left" valign="top">
        <para>Password for the ldap_search_user</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_user_filter</para>
       </entry>
       <entry align="left" valign="top">
        <para>Search filter for OBS users</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para>for example, a group membership, empty all users allowed</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_authenticate</para>
       </entry>
       <entry align="left" valign="top">
        <para>How user how the credentials are verified</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:ldap</literal> :local</para>
       </entry>
       <entry align="left" valign="top">
        <para>only use :ldap</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_auth_mech</para>
       </entry>
       <entry align="left" valign="top">
        <para>Used auth mech</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:md5</literal> :cleartext</para>
       </entry>
       <entry align="left" valign="top">
        <para>only if local</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_auth_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Used auth attribute for :local</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>userPassword</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>do not use</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_group_support</para>
       </entry>
       <entry align="left" valign="top">
        <para>Import OBS groups from LDAP</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>:off</literal> :on :mirror</para>
       </entry>
       <entry align="left" valign="top">
        <para>see text</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_group_search_base</para>
       </entry>
       <entry align="left" valign="top">
        <para>company’s LDAP search base for groups</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_group_title_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Attribute of the group name</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>cn</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_group_objectclass_attr</para>
       </entry>
       <entry align="left" valign="top">
        <para>Object class for group</para>
       </entry>
       <entry align="left" valign="top">
        <para><literal>Group</literal>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>ldap_obs_admin_group</para>
       </entry>
       <entry align="left" valign="top">
        <para>Group name for OBS Admins</para>
       </entry>
       <entry align="left" valign="top">
        <para/>
       </entry>
       <entry align="left" valign="top">
        <para>if set, members of that group become OBS admin role</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>Example LDAP section of the <emphasis>options.yml</emphasis>
    file:</para>
   <screen>[...]
##################
# LDAP options
##################

ldap_mode: :on
# LDAP Servers separated by ':'.
# OVERRIDE with your company's ldap servers. Servers are picked randomly for
# each connection to distribute load.
ldap_servers: ldap1.mycompany.com:ldap2.mycompany.com

# Max number of times to attempt to contact the LDAP servers
ldap_max_attempts: 15

# timeout of an ldap search requests to avoid infinitely lookups (in seconds, 0 no timeout)
ldap_search_timeout: 5

# The attribute the user member of is stored in (case sensitive !)
ldap_user_memberof_attr: memberOf

# Perform the group_user search with the member attribute of group entry or memberof attribute of user entry
# It depends on your ldap define
# The attribute the group member is stored in
ldap_group_member_attr: member

# If you're using ldap_authenticate=:ldap then you should ensure that
# ldaps is used to transfer the credentials over SSL or use the StartTLS extension
ldap_ssl: :on

# Use StartTLS extension of LDAP
ldap_start_tls: :off

# LDAP port defaults to 636 for ldaps and 389 for ldap and ldap with StartTLS
#ldap_port:
# Authentication with Windows 2003 AD requires
ldap_referrals: :off

# OVERRIDE with your company's ldap search base for the users who will use OBS
ldap_search_base: ou=developmentt,dc=mycompany,dc=com
# Account name attribute (sAMAccountName for Active Directory, uid for openLDAP)
ldap_search_attr: sAMAccountName
# The attribute the users name is stored in
ldap_name_attr: cn
# The attribute the users email is stored in
ldap_mail_attr: mail
# Credentials to use to search ldap for the username
ldap_search_user: "cn=ldapbind,ou=system,dc=mycompany,dc=com"
ldap_search_auth: "top secret"

# By default any LDAP user can be used to authenticate to the OBS
# In some deployments this may be too broad and certain criteria should
# be met; eg group membership
#
# To allow only users in a specific group uncomment this line:
ldap_user_filter: (memberof=cn=obsusers,ou=groups,dc=mycompany,dc=com)
#
# Note this is joined to the normal selection like so:
# (&amp;(#{dap_search_attr}=#{login})#{ldap_user_filter})
# giving an ldap search of:
#  (&amp;(sAMAccountName=#{login})(memberof=CN=group,OU=Groups,DC=Domain Component))
#
# Also note that openLDAP must be configured to use the memberOf overlay

# ldap_authenticate says how the credentials are verified:
#   :ldap = attempt to bind to ldap as user using supplied credentials
#   :local = compare the credentials supplied with those in
#            LDAP using #{ldap_auth_attr} &amp; #{ldap_auth_mech}
#       if :local is used then ldap_auth_mech can be
#       :md5
#       :cleartext
ldap_authenticate: :ldap
ldap_auth_mech: :md5
# This is a string
ldap_auth_attr: userPassword

# Whether to search group info from ldap, it does not take effect it is not set
# Please also set below ldap_group_* configs correctly to ensure the operation works properly
# Possible values:
#         :off     disabled
#         :on      enabled; every group member operation ask the LDAP server
#         :mirror  enabled; group membership is mirrored and updated on user login
#
ldap_group_support: :mirror

# OVERRIDE with your company's ldap search base for groups
ldap_group_search_base: ou=obsgroups,dc=mycompany,dc=com

# The attribute the group name is stored in
ldap_group_title_attr: cn

# The value of the group objectclass attribute
# group for Active Directory, groupOfNames in openLDAP
ldap_group_objectclass_attr: group

# The LDAP group for obs admins
# if this group is set and a user belongs to this group they get the global admin role
#
ldap_obs_admin_group: obsadmins</screen>
  </sect3>
 </sect2>
 <sect2 xml:id="user-and-group-management-authentication-methods">
  <title>Authentication Methods</title>
  <sect3 xml:id="user-and-group-management-authentication-methods-ldap-methods">
   <title>LDAP Methods</title>
   <para>The LDAP mode has 2 methods to check
    authorization:</para>
   <orderedlist>
    <listitem>
     <para> LDAP bind method.<?asciidoc-br?> With the provided credentials,
      an LDAP bind request is tried. </para>
    </listitem>
    <listitem>
     <para> Local method.<?asciidoc-br?> The provided credentials checked
      locally against the content of the
       <emphasis>userPassword</emphasis> attribute. </para>
    </listitem>
   </orderedlist>
   <important>
    <para>The local method should be not used, since the
      <emphasis>userPassword</emphasis> attribute in most LDAP installations
     will not be available until you are bind with a privilege user.</para>
   </important>
  </sect3>
  <sect3 xml:id="user-and-group-management-authentication-methods-kerberos">
   <title>Kerberos</title>
   <para>In OBS you can use single sign on via Kerberos tickets.</para>
   <para>OBS Kerberos configuration resides in the
     <emphasis>options.yml</emphasis> file.</para>
   <table frame="all" rowsep="1" colsep="1">
    <title>Kerberos Configuration Options</title>
    <tgroup cols="3">
     <colspec colname="col_1" colwidth="30*"/>
     <colspec colname="col_2" colwidth="40*"/>
     <colspec colname="col_3" colwidth="28*"/>
     <thead>
      <row>
       <entry align="left" valign="top"> Config item </entry>
       <entry align="left" valign="top"> Description </entry>
       <entry align="left" valign="top"> Example </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry align="left" valign="top">
        <para>kerberos_keytab</para>
       </entry>
       <entry align="left" valign="top">
        <para>Kerberos key table: file where long-term keys for one or more
         principals are stored</para>
       </entry>
       <entry align="left" valign="top">
        <para>"/etc/krb5.keytab"</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>kerberos_service_principal</para>
       </entry>
       <entry align="left" valign="top">
        <para>Kerberos OBS principal: OBS unique identity to which Kerberos
         can assign tickets</para>
       </entry>
       <entry align="left" valign="top">
        <para>"HTTP/hostname.example.com@EXAMPLE.COM"</para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>kerberos_realm</para>
       </entry>
       <entry align="left" valign="top">
        <para>Kerberos realm: authentication administrative domain</para>
       </entry>
       <entry align="left" valign="top">
        <para>"EXAMPLE.COM"</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Example Kerberos section of the <filename>options.yml</filename> file:
   </para>
   <screen>[...]

##################
# Kerberos options
##################

kerberos_mode: true
kerberos_keytab: "/etc/krb5.keytab"
kerberos_service_principal: "HTTP/hostname.example.com@EXAMPLE.COM"
kerberos_realm: "EXAMPLE.COM"

[...]
</screen>
   <note>
    <para> Once Kerberos is enabled, only users with logins that match users
     known to Kerberos will be able to authenticate to OBS. It is recommended
     to give admin rights to a matching user before enabling Kerberos mode.
    </para>
   </note>
  </sect3>
  <sect3>
   <title>OBS Token Authorization</title>
   <para> OBS 2.5 provides a mechanism to create tokens for specific
    operations. This can be used to allow certain operations in the name of a
    user to others. This is esp. useful when integrating external
    infrastructure. The create token should be kept secret by default, but it
    can also be revoked at any time if it became obsolete or leaked. </para>
   <sect4>
    <title>Managing Tokens of a User</title>
    <para> Tokens belong always to a user. A list of active tokens can received
     via </para>
    <screen><command>osc token</command></screen>
    <screen><command>osc token --delete &lt;TOKEN&gt;</command></screen>
   </sect4>
   <sect4>
    <title>Executing a Source Service</title>
    <para> A token can be used to execute a source service. The source service
     has to be setup for the package first, check the source service chapter
     for this. A typical example is to update sources of a package from git. A
     source service for that can be setup with </para>
    <screen><command>osc add git://....</command></screen>
    <para> A token can be registered as generic token, means allowing to
     execute all source services in OBS if the user has permissions. You can
     create such a token and execute the operation with </para>
    <screen><command>osc token --create</command></screen>
    <screen><command>osc token --trigger &lt;TOKEN&gt; &lt;PROJECT&gt; &lt;PACKAGE&gt;</command></screen>
    <screen><command>osc api -X POST /trigger/runservice?token=&lt;TOKEN&gt;&amp;project=&lt;PROJECT&gt;&amp;package=&lt;PACKAGE&gt;</command></screen>
    <para> You can also limit the token to a specific package. The advantage is
     that the operation is limited to that package, so less bad things can
     happen when the token leaks. Also you do not need to specify the package
     on execution time. Create and execute it with </para>
    <screen><command>osc token --create &lt;PROJECT&gt; &lt;PACKAGE&gt;</command></screen>
    <screen><command>osc token --trigger &lt;TOKEN&gt;</command></screen>
    <screen><command>osc api -X POST /trigger/runservice?token=&lt;TOKEN&gt;</command></screen>
   </sect4>
  </sect3>
 </sect2>
</sect1>
