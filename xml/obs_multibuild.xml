<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-multibuild"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Multiple Build Description File Handling</title>
 <info/>
 <sect1>
  <title>Overview</title>
  <para> A package source may contain multiple build description files. They
   can be used depending on the base distribution, the repository name or for
   different configurations. These mechanics can be also combined. </para>
  <para> The right build description file gets picked by filtering. The build
   will not start when either no file matches or multiple candidates exist. The
   filtering happens with the following steps:</para> 
   <orderedlist>
    <listitem>
     <para> Based on the package build format of the based distributions.
      &rpmf;-based distributions will use spec files for example. </para>
    </listitem>
    <listitem>
     <para> Based on the file name of the file before the suffix. It is not
      important as long as just one file exists, but it has to match when
      multiple files exist. The name is defined by the build container name,
      which is either defined in a _multibuild directive file or is the source
      package name. </para>
    </listitem>
    <listitem>
     <para> Specific files can be created to be built for a specific
      repository. Append the repository name of the build container behind the
      package name with a -. For example
       <command>hello-openSUSE_13.2.spec</command>. </para>
    </listitem>
   </orderedlist>
 </sect1>

 <sect1>
  <title>How Multibuild is Defined</title>
  <para> Use the _multibuild directive to build the same source in the same
   repository with different flavors. This handy to define all flavors in one
   place without the need to maintain packages with local links. This allows
   also to transfer all sources including a possible changed flavor from one
   project to another with a standard copy or submit request. </para>
  <para> The _multibuild file lists all build container names, each of them
   will be built as usual for each defined repository and each scheduler
   architecture. </para>
  <para> For example, inside the <command>kernel</command> source package we
   can build both <command>kernel-source</command> and
    <command>kernel-obs-build</command> packages by listing them inside the
   file. </para>
  <para> Multibuild packages are defined with the
    <command>_multibuild</command> directive file in the package sources. </para>
  <para> The <command>_multibuild</command> file is an xml file. For example:</para>
   <screen>&lt;multibuild&gt;
  &lt;flavor&gt;kernel-source&lt;/flavor&gt;
  &lt;flavor&gt;kernel-obs-build&lt;/flavor&gt;
&lt;/multibuild&gt;</screen>
   <para>Build description files are needed for each of them for each package
   (for example,
   kernel-source.spec or kernel-obs-build.dsc) inside of the sources. There
   will be another build in case there is also a matching file for the source
   package container name, otherwise it will turn into an
   <quote>excluded</quote> state. Dockerfile based build descriptions may provide
   own build descriptions for each flavor via Dockerfile.FLAVOR suffixed files.
  </para>
 </sect1>
</chapter>
