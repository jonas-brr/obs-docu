<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 version="5.1" xml:id="cha-obs-admin-components"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&obsa; Components</title>
 <para> The OBS is not a monolithic server: it consists of multiple daemons
  that perform different tasks. </para>
 <figure>
  <title>Simplified &obsa; Component Overview</title>
  <mediaobject>
   <imageobject>
    <imagedata fileref="obs_components.png" width="80%"/>
   </imageobject>
  </mediaobject>
 </figure>
 <sect2>
  <title>Front-end</title>
  <para> The OBS Front-end is a Ruby on Rails application that manages the
   access and manipulation of OBS data. It provides a web user interface and an
   application programming interface to do so. Both can be used to create,
   read, update and delete users, projects, packages, requests and other
   objects. It also implements additional sub-systems like authentication,
   search, and email notifications. </para>
 </sect2>
 <sect2>
  <title>Back-end</title>
  <para> The OBS Back-end is a collection of Perl applications that manage the
   source files and build jobs of the OBS. </para>
  <sect3>
   <title>Source Server</title>
   <para> Maintains the source repository and project/package configurations.
    It provides an HTTP interface, which is the only interface to the
    front-end. It may forward requests to other back-end services. Each OBS
    installation has exactly one Source Server. It maintains the "sources",
    "trees" and "projects" directories. </para>
  </sect3>
  <sect3>
   <title>Repository Server</title>
   <para> A repository server provides access to the binaries via an HTTP
    interface. It is used by the front-end via the source server only. Workers
    use the server to register, request the binaries needed for build jobs, and
    store the results. Notifications for schedulers are also created by
    repository servers. Each OBS installation has at least one repository
    server. A larger installation using partitioning has one on each partition.
   </para>
  </sect3>
  <sect3>
   <title>Scheduler</title>
   <para> A scheduler calculates the need for build jobs. It detects changes in
    sources, project configurations or in binaries used in the build
    environment. It is responsible for starting jobs in the right order and
    integrating the built binary packages. Each OBS installation has one
    scheduler per available architecture and partition. It maintains the
    "build" directory. </para>
  </sect3>
  <sect3>
   <title>Dispatcher</title>
   <para> The dispatcher takes a job (created by the scheduler) and assigns it
    to a free worker. It also checks possible build constraints to verify that
    the worker qualifies for the job. It only notifies a worker about a job;
    the worker itself downloads the required resources. Each OBS installation
    has one dispatcher per partition (one of which is the master dispatcher).
   </para>
  </sect3>
  <sect3>
   <title>Publisher</title>
   <para> The publisher processes "publish" events from the scheduler for
    finished repositories. It merges the build result of all architectures into
    a defined directory structure, creates the required metadata, and
    optionally syncs it to a download server. It maintains the "repos"
    directory on the back-end. Each OBS installation has one publisher per
    partition. </para>
  </sect3>
  <sect3>
   <title>Source Publisher</title>
   <para> The source publisher processes "sourcepublish" events from the publisher for
    published binary repositories. It needs to run on the same instance as the source server.
    It can be used to publish a filesystem structure providing all sources of
    published binaries. In case of images or containers this also includes the sources
    of used binary packages.</para>
  </sect3>
  <sect3>
   <title>Worker</title>
   <para> The workers register with the repository servers. They receive build
    jobs from the dispatcher. Afterwards they download sources from source
    server and the required binaries from the repository server(s). They build
    the package using the build script and send the results back to the
    repository server. A worker can run on the same host as other services, but
    most OBS installations have dedicated hardware for the workers. </para>
  </sect3>
  <sect3>
   <title>Signer</title>
   <para> The signer handles signing events and calls an external tool to
    execute the signing. Each OBS installation usually has one signer per
    partition and one on the source server installation. </para>
  </sect3>
  <sect3>
   <title>Warden</title>
   <para> The warden monitors the workers and detects crashed or hanging
    workers. Their build jobs will be canceled and restarted on another host.
    Each OBS installation can have one Warden service running on each
    partition. </para>
  </sect3>
  <sect3>
   <title>Download on Demand Updater (dodup)</title>
   <para> The download on demand updater monitors all external repositories
    which are defined as "download on demand" resources. It polls for changes
    in the metadata and re-downloads the metadata as needed. The scheduler will
    be notified to recalculate the build jobs depending on these repositories
    afterwards. Each OBS installation can have one dodup service running on
    each partition. </para>
  </sect3>
  <sect3>
   <title>Delta Store</title>
   <para> The delta store daemon maintains the deltas in the source storage.
    Multiple obscpio archives can be stored in one deltastore to avoid
    duplication on disk. This service calculates the delta and maintains the
    delta store. Each OBS installation can have one delta store process running
    next to the source server. </para>
  </sect3>
 </sect2>
 <sect2>
  <title>Command Line Client</title>
  <para> The Open Build Service Commander (osc) is a Python application with a
   Subversion-style command-line interface. It can be used to manipulate or
   query data from the OBS through its application programming interface.
  </para>
 </sect2>
 <sect2>
  <title>Content Delivery Server</title>
  <para> The OBS is agnostic about how you serve build results to your users.
   It will just write repositories to disk. But many people sync these
   repositories to some content delivery system like <link
    xlink:href="http://mirrorbrain.org/">MirrorBrain</link>. </para>
 </sect2>
 <sect2>
  <title>Requirements</title>
  <para> We highly recommend, and in fact only test, installations on the <link
    xlink:href="https://www.suse.com/products/server/">SUSE Linux Enterprise
    Server</link> and <link xlink:href="http://www.opensuse.org"
    >openSUSE</link> operating systems. However, there also are installations
   on Debian and Fedora systems. </para>
  <para> The OBS also needs a SQL database (MySQL or MariaDB) for persistent
   and a memcache daemon for volatile data. </para>
 </sect2>
</sect1>
