<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="tools">
 <title>Tools</title>
 <sect2 xml:id="tools-obs-admin">
  <title><command>obs_admin</command></title>
  <para>obs_admin is a command-line tool used on the back-end server(s) to manage
running services, submit maintenance tasks, and debug problems.
It should be only used by experienced admins.</para>
  <para>It has built-in help which you can display with <emphasis>obs_admin --help</emphasis>.</para>
  <para>Options to control the running services:</para>
<screen>Job Controlling
===============

 --shutdown-scheduler &lt;architecture&gt;
   Stops the scheduler nicely with dumping out its current state
   for fast startup.

 --check-project &lt;project&gt; &lt;architecture&gt;
 --check-project &lt;project&gt; &lt;repository&gt; &lt;architecture&gt;
 --check-all-projects &lt;architecture&gt;
   Check status of a project and its repositories again

 --deep-check-project &lt;project&gt; &lt;architecture&gt;
 --deep-check-project &lt;project&gt; &lt;repository&gt; &lt;architecture&gt;
   Check status of a project and its repositories again
   This deep check also includes the sources, in case of lost events.

 --check-package &lt;project&gt; &lt;package&gt; &lt;architecture&gt;
   Check status of a package in all repositories

 --publish-repository &lt;project&gt; &lt;repository&gt;
   Creates an event for the publisher. The scheduler is NOT scanning for new packages.
   The publisher may skip the event, if nothing has changed.
   Use --republish-repository when you want to enforce a publish.

 --unpublish-repository &lt;project&gt; &lt;repository&gt;
   Removes the prepared :repo collection and let the publisher remove the result. This
   is also updating the search database.
   WARNING: this works also for locked projects!

 --prefer-publish-event &lt;name&gt;
   prefers a publish event to be next. &lt;name&gt; is the file name inside of the publish
   event directory.

 --republish-repository &lt;project&gt; &lt;repository&gt;
   enforce to publish a repository

 --rebuild-full-tree &lt;project&gt; &lt;repository&gt; &lt;arch&gt;
   rebuild the content of :full/ directory

 --clone-repository &lt;source project&gt; &lt;source repository&gt; &lt;destination repository&gt;
 --clone-repository &lt;source project&gt; &lt;source repository&gt; &lt;destination project&gt; &lt;destination repository&gt;
   Clone an existing repo into another existing repository.
   Usefull for creating snapshots.

 --rescan-repository &lt;project&gt; &lt;repository&gt; &lt;architecture&gt;
   Asks the scheduler to scan a repository for new packages and add
   them to the cache file.

 --force-check-project &lt;project&gt; &lt;repository&gt; &lt;architecture&gt;
   Enforces the check of an repository, even when it is currently blocked due to amount of
   calculating time.

 --create-patchinfo-from-updateinfo
   creates a patchinfo submission based on an updateinfo information.</screen>
  <para>Options for maintenance are:</para>
<screen>Maintenance Tasks
=================

Note: the --update-*-db calls are usually only needed when corrupt data has been created, for
      example after a file system corruption.

 --update-source-db [&lt;project&gt;]
   Update the index for all source files.

 --update-request-db
   Updates the index for all requests.

 --remove-old-sources &lt;days&gt; &lt;y&gt; (--debug)
   WARNING: this is an experimental feature atm. It may trash your data, but you have anyway
            a backup, right?
   remove sources older than &lt;x&gt; days, but keep &lt;y&gt; number of revisions
   --debug for debug output</screen>
  <para>Options for debugging:</para>
<screen>Debug Options
=============

 --dump-cache &lt;project&gt; &lt;repository&gt; &lt;architecture&gt;
   Dumps out the content of a binary cache file.
   This shows all the content of a repository, including all provides
   and requires.

 --dump-state &lt;architecture&gt;

 --dump-project-from-state &lt;project&gt; &lt;arch&gt;
   dump the state of a project.

 --dump-relsync &lt;file&gt;
   To dump content of :relsync files.

 --set-relsync &lt;file&gt; &lt;key&gt; &lt;value&gt;
   Modify key content in a a :relsync file.

 --check-meta-xml &lt;project&gt;
 --check-meta-xml &lt;project&gt; &lt;package&gt;
   Is parsing a project or package xml file and puts out error messages, in case of errors.

 --check-product-xml &lt;file&gt;
   Is parsing a product xml file and puts out error messages, in case of errors.
   It does expand all xi:include references and validates the result.

 --check-product-group-xml &lt;file&gt;
   Is parsing a group xml file from a product definition and puts out error messages, in case of errors.

 --check-kiwi-xml &lt;file&gt;
 --check-kiwi-xml &lt;project&gt; &lt;package&gt;
   Is parsing a &kiwi; xml file and puts out error messages, in case of errors.

 --check-constraints &lt;file&gt;
 --check-constraints &lt;project&gt; &lt;package&gt;
   Validates a _constraints file

 --check-pattern-xml &lt;file&gt;
   Is parsing a pattern xml file and puts out error messages, in case of errors.

 --check-request-xml &lt;file&gt;
   Is parsing a request xml file and puts out error messages, in case of errors.

 --parse-build-desc &lt;file&gt; [&lt;arch&gt; [&lt;buildconfigfile&gt;]]
   Parse a spec, dsc or &kiwi; file with the Build script parser.

 --show-scheduler-architectures
   Show all architectures which are configured in configuration.xml to be supported by this instance.

 --show-delta-file &lt;file&gt;
   Show all instructions of a OBS delta file

 --show-delta-store &lt;file&gt;
   Show delta store statistics</screen>
 </sect2>
 <sect2 xml:id="tools-osc">
  <title>&osccmd;</title>
  <para>The <emphasis role="strong"><emphasis>osc</emphasis></emphasis> command-line client is mainly used by developers and packagers. But
for some tasks, admin people also need this tool. It too has builtin help:
use <emphasis>osc --help</emphasis>. The tool needs to be configured first to know the
OBS API URL and your user details.</para>
  <para>To configure the <emphasis role="strong"><emphasis>osc</emphasis></emphasis> tool the first time you need to call it with</para>
<screen>osc -A &lt;URL to the OBS API&gt;
For example:
osc -A https://api.testobs.org</screen>
  <para>Follow the instructions on the terminal.</para>
  <warning>
   <para>The password is stored in clear text in the .oscrc file by default, so you need to
give this file restrictive access rights, only read/write access for your user
should be allowed. <emphasis role="strong">osc</emphasis> allows to store the password in other ways (in keyrings
for example) and may use different methods for authentication like
Kerberos see <xref linkend="user-and-group-management-authentication-methods-kerberos"/>
   </para>
  </warning>
  <para>For admins the most important <emphasis role="strong"><emphasis>osc</emphasis></emphasis> subcommands are:</para>
  <itemizedlist>
   <listitem>
    <para>
meta  - to create or update projects or package data
</para>
   </listitem>
   <listitem>
    <para>
API - to read and write online configuration data
</para>
   </listitem>
  </itemizedlist>
  <sect3 xml:id="tools-osc-osc-meta-subcommand">
   <title><command>osc meta</command> Subcommand</title>
   <para>The <command>osc meta</command> subcommand is documented inside the "osc" tool itself. This documentation can be displayed by issuing the command:</para>
<screen>osc meta --help</screen>
  </sect3>
  <sect3 xml:id="tools-osc-osc-api-subcommand">
   <title><command>osc api</command> Subcommand</title>
   <para>The <command>osc api</command> subcommand is documented inside the "osc" tool itself. This documentation can be displayed by issuing the command:</para>
<screen>osc api --help</screen>
   <para>The OBS API itself is documented at
<link xlink:href="https://api.opensuse.org/apidocs/"/>
   </para>
   <para>Some examples for admin stuff:</para>
<screen># Read the global configuration file
  osc api /configuration
# Update the global configuration
  osc api /configuration -T /tmp/configuration.xml

# Read the distributions list
  osc api /distributions
# Udate the distributions list
  osc api /distributions -T /tmp/distributions.xml

# retrieve statistics
  osc api /statistics/latest_added</screen>
  </sect3>
 </sect2>
</sect1>
