<!DOCTYPE preface
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<preface version="5.1" xml:id="cha-obs-motivation"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Distributing Free Software: Herding Cats</title>
 <info>
  <para>
   <remark>TBD</remark>
  </para>
 </info>

 <sect1 xml:id="sec-obs-motivation">
  <title>Motivation</title>
  <para>
   The basic challenge when distributing Free and Open Source Software
   (FOSS) is compiling into machine code all of the source code that the
   awesome community produces. It may sound simple, but it is not. A typical
   GNU/Linux distribution consists of thousands of individual software
   projects. They build on top of each other, have functional dependencies,
   some projects are interdependent, or conflict with each other. In short, it
   is like herding cats. Another challenge of distributing software is that,
   sadly, software is sometimes defective and people&mdash;even
   developers&mdash;make mistakes. One has to master the art of exchanging
   pieces without breaking the whole: in other words, software updates.
  </para>
  <para>
  The &OBS; is a tool that makes this possible. It is a generic system to
  build and distribute binary packages from sources in an
  <emphasis>automatic</emphasis>, <emphasis>consistent</emphasis> and
  <emphasis>reproducible</emphasis> way. &obsa; itself is free software;
  you can run, copy, distribute, study, change and improve it. The source
  code and the developers are on GitHub at <link
    xlink:href="https://github.com/openSUSE/open-build-service"/>.
  </para>
 </sect1>

 <sect1 xml:id="sec-obs-goals">
  <title>Goals and Target Groups for &obsa;</title>
  <para> The goals of the OBS are oriented towards the three groups of people
   that use it: </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>Packagers</title>
     <para>People who contribute to the Free Software community by
     building binary packages of software</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Users</title>
     <para>People who are looking to install software on their distribution.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Free Software Projects and Independent Software Vendors (ISV)</title>
     <para>People who provide complete software stacks and distributions to
      their users.</para>
    </formalpara>
    <para></para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-obs-goals-packagers">
   <title>Automated Software Builds for Packagers</title>
   <para>
    For people who contribute to the Free Software community by packaging
    software (packagers), &obsa; tries to automate that task as much as
    possible. Especially the need to maintain a lot of different operating
    system (OS) installations, different OS versions, and different hardware
    architectures, is something &obsa; makes easier.
   </para>
  </sect2>

  <sect2 xml:id="sec-obs-goals-isv">
   <title>Reproducibility for Free Software Projects and Independent Software Vendors (ISV)</title>
   <para> &obsa; emphasizes on making builds reproducible. It builds packages in
    a jailed environment that &obsa; sets up from scratch each time. When the
    build succeeds, it also rebuilds all the dependent software. This ensures
    that changes propagate throughout the entire stack and that users get a
    consistent product to install.</para>
   <para>
    Reproducibility is especially needed if the
    delivered software stack consists of a lot of parts that have functional
    dependencies. Because of something is reproducible, it is predictable.
    This is what projects and ISVs aim for. If you can predict how each of the
    software packages within your GNU/Linux distribution influences the other,
    you can make sure that if you change one of them, the whole thing still
    works as expected.</para>
   <para>&obsa; features also collaboration among developers. This baked-in
    structure and workflow helps projects and ISVs to use the power of the
    open source development model.
   </para>
  </sect2>

  <sect2 xml:id="sec-obs-goals-users">
   <title>Easy Access to Software for Users</title>
   <para> The OBS aims to make it easy for users to download the latest version
    of software as binary packages for their operating system. They do not have
    to know about tarballs, make install, package formats or other stuff from
    the 90's. Another priority is to make use of the package management tools
    of the user's OS with which they are already familiar. Users should get
    their software from the OBS just as they get software from their OS
    supplier, no special tools needed. And once users are connected to a
    repository, they get served with maintenance or security updates or even
    add-ons for their software. </para>
  </sect2>
 </sect1>

<!--
 <sect1>
  <title>History of the OBS</title>
  <para> From building packages on workstations over autobuild to OBS. </para>
 </sect1>

 <sect1>
  <title>Future of the OBS</title>
  <para> With the advent of test-driven development and similar agile methods
   in recent years, the software development community has shown a clear trend
   towards automated and continuous <link
    xlink:href="https://en.wikipedia.org/wiki/Continuous_Integration"
    >integration</link>, <link
    xlink:href="https://en.wikipedia.org/wiki/Continuous_deployment"
    >deployment</link> and <link
    xlink:href="https://en.wikipedia.org/wiki/Continuous_delivery"
    >delivery</link>. The OBS is moving more and more from a standalone
   solution to be one link in the chain of software development tools. And
   while "software is eating the world", it is also becoming more complex every
   day. This prompts for the need to know who changed what and when. And when
   and how was that delivered to the users? Tracking and analyzing this, making
   trends visible to be able to act upon them is another challenge for the
   future. All of this besides the general challenge of keeping up with the
   fast and disruptive evolution of the Free Software ecosystem, which
   constantly supports new hardware, software, standards and tools makes for a
   very interesting future. </para>
 </sect1>
-->
</preface>
